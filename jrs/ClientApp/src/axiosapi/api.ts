// tslint:disable
/**
 * JRSAPI
 * JRS Information Management System API
 *
 * The version of the OpenAPI document: v1(Build: 1.0.0.0)
 * Contact: blogic@blogic.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Class defining a rule that is part of a more complex query \"where\" condition.
 * @export
 * @interface GenericConditionRule
 */
export interface GenericConditionRule {
    /**
     * 
     * @type {string}
     * @memberof GenericConditionRule
     */
    operandA?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GenericConditionRule
     */
    operandB?: string | null;
    /**
     * 
     * @type {RuleOperator}
     * @memberof GenericConditionRule
     */
    operator?: RuleOperator;
}
/**
 * Class defining labels for JrsTable columns.
 * @export
 * @interface GenericExcelColumnLabel
 */
export interface GenericExcelColumnLabel {
    /**
     * 
     * @type {string}
     * @memberof GenericExcelColumnLabel
     */
    columnName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GenericExcelColumnLabel
     */
    columnLabel?: string | null;
}
/**
 * Class defining stored procedure parameters.
 * @export
 * @interface ProcedureParameter
 */
export interface ProcedureParameter {
    /**
     * 
     * @type {string}
     * @memberof ProcedureParameter
     */
    name?: string | null;
    /**
     * 
     * @type {string | number | null}
     * @memberof ProcedureParameter
     */
    value?: string | number | null;
}


/**
 * Class defining  the required payload for generic excel creation based on sql SP .
 * @export
 * @interface ExcelStoredProcedurePayload
 */
export interface ExcelStoredProcedurePayload {
    /**
     * 
     * @type {Array<ProcedureParameter>}
     * @memberof ExcelStoredProcedurePayload
     */
    PROCEDURE_PARAMETERS?: Array<ProcedureParameter> | null;
    /**
     * 
     * @type {string}
     * @memberof ExcelStoredProcedurePayload
     */
    PROCEDURE_NAME?: string;
}
/**
 * Class defining the required payload for generic excel creation based on sql queried data.
 * @export
 * @interface GenericExelSelectPayload
 */
export interface GenericExelSelectPayload {
    /**
     * 
     * @type {Array<GenericExcelColumnLabel>}
     * @memberof GenericExelSelectPayload
     */
    columnLabels?: Array<GenericExcelColumnLabel> | null;
    /**
     * 
     * @type {string}
     * @memberof GenericExelSelectPayload
     */
    bodyValues?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GenericExelSelectPayload
     */
    sheetName?: string | null;
    /**
     * Name of db view to query.
     * @type {string}
     * @memberof GenericExelSelectPayload
     */
    viewName?: string | null;
    /**
     * List of names of specific columns to query. If not defined, all columns are returned.
     * @type {string}
     * @memberof GenericExelSelectPayload
     */
    colList?: string | null;
    /**
     * Where condition to be applied to query.
     * @type {string}
     * @memberof GenericExelSelectPayload
     */
    whereCond?: string | null;
    /**
     * Ordering criteria of query.
     * @type {string}
     * @memberof GenericExelSelectPayload
     */
    orderStmt?: string | null;
    /**
     * Number of items to recover
     * @type {number}
     * @memberof GenericExelSelectPayload
     */
    itemNumber?: number | null;
    /**
     * Number of items to skip
     * @type {number}
     * @memberof GenericExelSelectPayload
     */
    skipNumber?: number | null;
    /**
     * Office to filter dataset
     * @type {number}
     * @memberof GenericExelSelectPayload
     */
    officeId?: number | null;
    /**
     * The users current locale
     * @type {string}
     * @memberof GenericExelSelectPayload
     */
    currentLocale?: string | null;
    /**
     * Enables the possibility to override the office filter when querying the data
     * @type {boolean}
     * @memberof GenericExelSelectPayload
     */
    ignoreOfficeFilter?: boolean | null;
    /**
     * 
     * @type {Array<GenericConditionRule>}
     * @memberof GenericExelSelectPayload
     */
    conditionRules?: Array<GenericConditionRule> | null;
}
/**
 * Payload for generic sql execution of SP.
 * @export
 * @interface GenericSqlPayload
 */
export interface GenericSqlPayload {
    /**
     * Name of SP to execute.
     * @type {string}
     * @memberof GenericSqlPayload
     */
    spName?: string | null;
    /**
     * Tye of action for the selected SP.
     * @type {SqlActionType}
     * @memberof GenericSqlPayload
     */
    actionType?: SqlActionType;
    /**
     * Payload in JSON format to be used by the SP.
     * @type {string}
     * @memberof GenericSqlPayload
     */
    jsonPayload?: string | null;
    /**
     * UID of the user that initiated the action.
     * @type {string}
     * @memberof GenericSqlPayload
     */
    userUid?: string | null;
    /**
     * ID of the active office of the user that initiated the action.
     * @type {number}
     * @memberof GenericSqlPayload
     */
    officeId?: number | null;
    /**
     * The users current locale
     * @type {string}
     * @memberof GenericSqlPayload
     */
    currentLocale?: string | null;
}
/**
 * Class defining the required payload for generic sql select calls.
 * @export
 * @interface GenericSqlSelectPayload
 */
export interface GenericSqlSelectPayload {
    /**
     * Name of db view to query.
     * @type {string}
     * @memberof GenericSqlSelectPayload
     */
    viewName?: string | null;
    /**
     * List of names of specific columns to query. If not defined, all columns are returned.
     * @type {string}
     * @memberof GenericSqlSelectPayload
     
     */
    viewSchema?: string | 'dbo';
    /**
     * List of names of specific columns to query. If not defined, all columns are returned.
     * @type {string}
     * @memberof GenericSqlSelectPayload
     
     */
    colList?: string | null;
    /**
     * Where condition to be applied to query.
     * @type {string}
     * @memberof GenericSqlSelectPayload
     */
    whereCond?: string | null;
    /**
     * Ordering criteria of query.
     * @type {string}
     * @memberof GenericSqlSelectPayload
     */
    orderStmt?: string | null;
    /**
     * Number of items to recover
     * @type {number}
     * @memberof GenericSqlSelectPayload
     */
    itemNumber?: number | null;
    /**
     * Number of items to skip
     * @type {number}
     * @memberof GenericSqlSelectPayload
     */
    skipNumber?: number | null;
    /**
     * Office to filter dataset
     * @type {number}
     * @memberof GenericSqlSelectPayload
     */
    officeId?: number | null;
    /**
     * The users current locale
     * @type {string}
     * @memberof GenericSqlSelectPayload
     */
    currentLocale?: string | null;
    /**
     * Enables the possibility to override the office filter when querying the data
     * @type {boolean}
     * @memberof GenericSqlSelectPayload
     */
    ignoreOfficeFilter?: boolean | null;
    /**
     * 
     * @type {Array<GenericConditionRule>}
     * @memberof GenericSqlSelectPayload
     */
    conditionRules?: Array<GenericConditionRule> | null;
}
/**
 * 
 * @export
 * @interface HrBiodata
 */
export interface HrBiodata {
    /**
     * 
     * @type {number}
     * @memberof HrBiodata
     */
    hrBiodataId?: number;
    /**
     * 
     * @type {string}
     * @memberof HrBiodata
     */
    hrBiodataUserUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HrBiodata
     */
    hrBiodataSurname?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HrBiodata
     */
    hrBiodataMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HrBiodata
     */
    hrBiodataName?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof HrBiodata
     */
    hrBiodataBirthDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof HrBiodata
     */
    hrBiodataBirthPlace?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HrBiodata
     */
    hrBiodataNationality?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof HrBiodata
     */
    hrBiodataReligious?: boolean;
    /**
     * 
     * @type {number}
     * @memberof HrBiodata
     */
    hrBiodataPermanentLocationId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof HrBiodata
     */
    hrBiodataIdentificationDocuments?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HrBiodata
     */
    hrBiodataRegnumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HrBiodata
     */
    hrBiodataPhoto?: string | null;
    /**
     * 
     * @type {number}
     * @memberof HrBiodata
     */
    hrBiodataGenederLookupId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof HrBiodata
     */
    hrBiodataPersonalTitleLookupId?: number | null;
    /**
     * 
     * @type {ImsLookup}
     * @memberof HrBiodata
     */
    lookupGender?: ImsLookup | null;
    /**
     * 
     * @type {ImsLookup}
     * @memberof HrBiodata
     */
    lookupPersonalTtitle?: ImsLookup | null;
}
/**
 * 
 * @export
 * @interface HrGender
 */
export interface HrGender {
    /**
     * 
     * @type {number}
     * @memberof HrGender
     */
    hrGenderId?: number;
    /**
     * 
     * @type {string}
     * @memberof HrGender
     */
    hrGenderCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HrGender
     */
    hrGenderDescr?: string | null;
}
/**
 * 
 * @export
 * @interface HrOffice
 */
export interface HrOffice {
    /**
     * 
     * @type {number}
     * @memberof HrOffice
     */
    hrOfficeId?: number;
    /**
     * 
     * @type {string}
     * @memberof HrOffice
     */
    hrOfficeCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HrOffice
     */
    hrOfficeLegalName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HrOffice
     */
    hrOfficeLegalNameNative?: string | null;
    /**
     * 
     * @type {number}
     * @memberof HrOffice
     */
    hrOfficeLegalLanguageId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof HrOffice
     */
    hrOfficeNativeLanguageId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof HrOffice
     */
    hrOfficeLegalRepName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HrOffice
     */
    hrOfficeSignatoryName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof HrOffice
     */
    hrOfficeLegalAddressId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof HrOffice
     */
    hrOfficeCountryAdminAreaId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof HrOffice
     */
    hrOfficeRegisteredName?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof HrOffice
     */
    isInternational?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof HrOffice
     */
    isRegional?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof HrOffice
     */
    isCountry?: boolean | null;
    /**
     * 
     * @type {Array<SfipIndicatorOffice>}
     * @memberof HrOffice
     */
    indicatorOfficeList?: Array<SfipIndicatorOffice> | null;
    /**
     * 
     * @type {Array<HrOfficeRelation>}
     * @memberof HrOffice
     */
    hrOfficeRelationChildOffices?: Array<HrOfficeRelation> | null;
    /**
     * 
     * @type {Array<HrOfficeRelation>}
     * @memberof HrOffice
     */
    hrOfficeRelationParentOffices?: Array<HrOfficeRelation> | null;
    /**
     * 
     * @type {Array<HrOffice>}
     * @memberof HrOffice
     */
    flatDescendantOfficeList?: Array<HrOffice> | null;
}
/**
 * 
 * @export
 * @interface HrOfficeRelation
 */
export interface HrOfficeRelation {
    /**
     * 
     * @type {number}
     * @memberof HrOfficeRelation
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof HrOfficeRelation
     */
    parentOfficeId?: number;
    /**
     * 
     * @type {number}
     * @memberof HrOfficeRelation
     */
    childOfficeId?: number;
    /**
     * 
     * @type {Date}
     * @memberof HrOfficeRelation
     */
    dateStart?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof HrOfficeRelation
     */
    dateEnd?: Date | null;
    /**
     * 
     * @type {HrOffice}
     * @memberof HrOfficeRelation
     */
    childOffice?: HrOffice | null;
    /**
     * 
     * @type {HrOffice}
     * @memberof HrOfficeRelation
     */
    parentOffice?: HrOffice | null;
}
/**
 * 
 * @export
 * @interface HrPersonalTitle
 */
export interface HrPersonalTitle {
    /**
     * 
     * @type {number}
     * @memberof HrPersonalTitle
     */
    hrPersonalTitleId?: number;
    /**
     * 
     * @type {string}
     * @memberof HrPersonalTitle
     */
    hrPersonalTitleDescr?: string | null;
}
/**
 * 
 * @export
 * @interface ImsAnswerInstance
 */
export interface ImsAnswerInstance {
    /**
     * 
     * @type {number}
     * @memberof ImsAnswerInstance
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsAnswerInstance
     */
    questionnaireInstanceId?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsAnswerInstance
     */
    questionId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsAnswerInstance
     */
    answerText?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ImsAnswerInstance
     */
    answerDate?: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImsAnswerInstance
     */
    answerCheckbox?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof ImsAnswerInstance
     */
    answerNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ImsAnswerInstance
     */
    answerOptionId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ImsAnswerInstance
     */
    answerMatrixOptionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsAnswerInstance
     */
    fillInUser?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsAnswerInstance
     */
    fillInHousehold?: string | null;
    /**
     * 
     * @type {ImsQuestion}
     * @memberof ImsAnswerInstance
     */
    question?: ImsQuestion | null;
    /**
     * 
     * @type {ImsQuestionAnswerOptions}
     * @memberof ImsAnswerInstance
     */
    questionAnswerOption?: ImsQuestionAnswerOptions | null;
}
/**
 * 
 * @export
 * @interface ImsFormFieldType
 */
export interface ImsFormFieldType {
    /**
     * 
     * @type {number}
     * @memberof ImsFormFieldType
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsFormFieldType
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsFormFieldType
     */
    descr?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImsFormFieldType
     */
    isAvailableForQuestionnaire?: boolean;
}
/**
 * 
 * @export
 * @interface ImsLabels
 */
export interface ImsLabels {
    /**
     * 
     * @type {number}
     * @memberof ImsLabels
     */
    imsLabelsId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsLabels
     */
    imsLabelsTableName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImsLabels
     */
    imsLabelsNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsLabels
     */
    imsLabelsLanguageId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsLabels
     */
    imsLabelsValue?: string | null;
    /**
     * 
     * @type {ImsLanguage}
     * @memberof ImsLabels
     */
    imsLabelsLanguage?: ImsLanguage | null;
}
/**
 * 
 * @export
 * @interface ImsLanguage
 */
export interface ImsLanguage {
    /**
     * 
     * @type {number}
     * @memberof ImsLanguage
     */
    imsLanguageId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsLanguage
     */
    imsLanguageIso6391Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsLanguage
     */
    imsLanguageName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsLanguage
     */
    imsLanguageFamily?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsLanguage
     */
    imsLnaguageNotes?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsLanguage
     */
    imsLanguageLocale?: string | null;
    /**
     * 
     * @type {Array<ImsLabels>}
     * @memberof ImsLanguage
     */
    imsLabels?: Array<ImsLabels> | null;
}
/**
 * 
 * @export
 * @interface ImsList
 */
export interface ImsList {
    /**
     * 
     * @type {string}
     * @memberof ImsList
     */
    value?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsList
     */
    text?: string | null;
}
/**
 * 
 * @export
 * @interface ImsLookup
 */
export interface ImsLookup {
    /**
     * 
     * @type {number}
     * @memberof ImsLookup
     */
    imsLookupId?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsLookup
     */
    imsLookupLookupTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsLookup
     */
    imsLookupCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsLookup
     */
    imsLookupValue?: string | null;
    /**
     * 
     * @type {ImsLookupType}
     * @memberof ImsLookup
     */
    imsLookupLookupType?: ImsLookupType | null;
    /**
     * 
     * @type {Array<SfipActivitySchedule>}
     * @memberof ImsLookup
     */
    sfipActivitySchedules?: Array<SfipActivitySchedule> | null;
}
/**
 * 
 * @export
 * @interface ImsLookupType
 */
export interface ImsLookupType {
    /**
     * 
     * @type {number}
     * @memberof ImsLookupType
     */
    imsLookupTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsLookupType
     */
    imsLookupTypeCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsLookupType
     */
    imsLookupTypeDescr?: string | null;
}
/**
 * 
 * @export
 * @interface ImsQuestion
 */
export interface ImsQuestion {
    /**
     * 
     * @type {number}
     * @memberof ImsQuestion
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestion
     */
    questionText?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestion
     */
    questionHint?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestion
     */
    questionType?: number;
    /**
     * 
     * @type {ImsFormFieldType}
     * @memberof ImsQuestion
     */
    formFieldType?: ImsFormFieldType | null;
    /**
     * 
     * @type {Array<ImsQuestionnaireQuestion>}
     * @memberof ImsQuestion
     */
    questionnaireQuestionList?: Array<ImsQuestionnaireQuestion> | null;
    /**
     * 
     * @type {Array<ImsQuestionAnswerOptions>}
     * @memberof ImsQuestion
     */
    questionAnswerOptionsList?: Array<ImsQuestionAnswerOptions> | null;
}
/**
 * 
 * @export
 * @interface ImsQuestionAnswerOptions
 */
export interface ImsQuestionAnswerOptions {
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionAnswerOptions
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionAnswerOptions
     */
    questionId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestionAnswerOptions
     */
    answerText?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImsQuestionAnswerOptions
     */
    isCorrectAnswer?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionAnswerOptions
     */
    score?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestionAnswerOptions
     */
    matrixCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionAnswerOptions
     */
    matrixRow?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionAnswerOptions
     */
    matrixColumn?: number;
}
/**
 * 
 * @export
 * @interface ImsQuestionnaire
 */
export interface ImsQuestionnaire {
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaire
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestionnaire
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestionnaire
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestionnaire
     */
    descr?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImsQuestionnaire
     */
    includeBeneficiarySelection?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ImsQuestionnaire
     */
    includeHouseholdSelection?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ImsQuestionnaire
     */
    includeSettlementSelection?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ImsQuestionnaire
     */
    includeProjectSelection?: boolean;
    /**
     * 
     * @type {Array<ImsQuestionnaireOffice>}
     * @memberof ImsQuestionnaire
     */
    questionnaireOfficeList?: Array<ImsQuestionnaireOffice> | null;
    /**
     * 
     * @type {Array<ImsQuestionnaireQuestion>}
     * @memberof ImsQuestionnaire
     */
    questionnaireQuestionList?: Array<ImsQuestionnaireQuestion> | null;
    /**
     * 
     * @type {Array<ImsQuestionnaireTab>}
     * @memberof ImsQuestionnaire
     */
    questionnaireTabList?: Array<ImsQuestionnaireTab> | null;
}
/**
 * 
 * @export
 * @interface ImsQuestionnaireInstance
 */
export interface ImsQuestionnaireInstance {
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireInstance
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireInstance
     */
    questionnaireId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestionnaireInstance
     */
    fillInUser?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestionnaireInstance
     */
    fillInHousehold?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestionnaireInstance
     */
    fillInAssistant?: string;
    /**
     * 
     * @type {Date}
     * @memberof ImsQuestionnaireInstance
     */
    fillInDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestionnaireInstance
     */
    reviewUser?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ImsQuestionnaireInstance
     */
    reviewDate?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireInstance
     */
    statusId?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireInstance
     */
    relevantOfficeId?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireInstance
     */
    selectedSettlement?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireInstance
     */
    selectedProject?: number | null;
    /**
     * 
     * @type {Array<ImsAnswerInstance>}
     * @memberof ImsQuestionnaireInstance
     */
    answerInstanceList?: Array<ImsAnswerInstance> | null;
    /**
     * 
     * @type {ImsQuestionnaire}
     * @memberof ImsQuestionnaireInstance
     */
    questionnaire?: ImsQuestionnaire | null;
    /**
     * 
     * @type {ImsStatus}
     * @memberof ImsQuestionnaireInstance
     */
    status?: ImsStatus | null;
}
/**
 * 
 * @export
 * @interface ImsQuestionnaireOffice
 */
export interface ImsQuestionnaireOffice {
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireOffice
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireOffice
     */
    questionnaireId?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireOffice
     */
    officeId?: number;
}
/**
 * 
 * @export
 * @interface ImsQuestionnaireQuestion
 */
export interface ImsQuestionnaireQuestion {
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireQuestion
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireQuestion
     */
    questionnaireId?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireQuestion
     */
    questionId?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireQuestion
     */
    ordinalPosition?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireQuestion
     */
    tabId?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImsQuestionnaireQuestion
     */
    isRequired?: boolean;
    /**
     * 
     * @type {ImsQuestionnaire}
     * @memberof ImsQuestionnaireQuestion
     */
    questionnaire?: ImsQuestionnaire | null;
    /**
     * 
     * @type {ImsQuestion}
     * @memberof ImsQuestionnaireQuestion
     */
    question?: ImsQuestion | null;
    /**
     * 
     * @type {ImsQuestionnaireTab}
     * @memberof ImsQuestionnaireQuestion
     */
    questionnaireTab?: ImsQuestionnaireTab | null;
}
/**
 * 
 * @export
 * @interface ImsQuestionnaireTab
 */
export interface ImsQuestionnaireTab {
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireTab
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestionnaireTab
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsQuestionnaireTab
     */
    descr?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireTab
     */
    questionnaireId?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsQuestionnaireTab
     */
    ordinalPosition?: number;
    /**
     * 
     * @type {ImsQuestionnaire}
     * @memberof ImsQuestionnaireTab
     */
    questionnaire?: ImsQuestionnaire | null;
}
/**
 * 
 * @export
 * @interface ImsStatus
 */
export interface ImsStatus {
    /**
     * 
     * @type {number}
     * @memberof ImsStatus
     */
    imsStatusId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsStatus
     */
    imsStatusName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsStatus
     */
    imsStatusDescr?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsStatus
     */
    imsStatusCode?: string | null;
}
/**
 * 
 * @export
 * @interface ImsTemplate
 */
export interface ImsTemplate {
    /**
     * 
     * @type {number}
     * @memberof ImsTemplate
     */
    templateId?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsTemplate
     */
    templateTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplate
     */
    templateCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplate
     */
    templateText?: string | null;
    /**
     * 
     * @type {ImsTemplateType}
     * @memberof ImsTemplate
     */
    templateType?: ImsTemplateType | null;
    /**
     * 
     * @type {Array<ImsTemplateOffice>}
     * @memberof ImsTemplate
     */
    templateOfficeList?: Array<ImsTemplateOffice> | null;
}
/**
 * 
 * @export
 * @interface ImsTemplateOffice
 */
export interface ImsTemplateOffice {
    /**
     * 
     * @type {number}
     * @memberof ImsTemplateOffice
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsTemplateOffice
     */
    templateId?: number;
    /**
     * 
     * @type {number}
     * @memberof ImsTemplateOffice
     */
    officeId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ImsTemplateOffice
     */
    isDeleted?: boolean;
}
/**
 * 
 * @export
 * @interface ImsTemplateParams
 */
export interface ImsTemplateParams {
    /**
     * 
     * @type {number}
     * @memberof ImsTemplateParams
     */
    templateParamId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplateParams
     */
    templateParamDescr?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplateParams
     */
    templateParamColumnName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImsTemplateParams
     */
    templateTypeId?: number;
}
/**
 * 
 * @export
 * @interface ImsTemplateType
 */
export interface ImsTemplateType {
    /**
     * 
     * @type {number}
     * @memberof ImsTemplateType
     */
    templateTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplateType
     */
    templateTypeCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplateType
     */
    templateTypeDescr?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplateType
     */
    templateDataQuery?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplateType
     */
    selectItemsDatasource?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplateType
     */
    selectItemKey?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplateType
     */
    selectItemText?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplateType
     */
    fieldTranslationKey?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsTemplateType
     */
    defaultDataQueryCondition?: string | null;
    /**
     * 
     * @type {Array<ImsTemplateParams>}
     * @memberof ImsTemplateType
     */
    templateParams?: Array<ImsTemplateParams> | null;
}
/**
 * 
 * @export
 * @interface ImsUser
 */
export interface ImsUser {
    /**
     * 
     * @type {string}
     * @memberof ImsUser
     */
    imsUserUid?: string;
    /**
     * 
     * @type {Date}
     * @memberof ImsUser
     */
    imsUserCreationDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ImsUser
     */
    imsUserLocale?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsUser
     */
    imsUserUsername?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsUser
     */
    imsUserPassword?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImsUser
     */
    imsUserRefreshToken?: string | null;
    /**
     * E-mail address used by Microsoft Azure AD
     * @type {string}
     * @memberof ImsUser
     */
    imsUserEmail?: string | null;
    /**
     * Account Identifier from Microsoft Azure AD
     * @type {string}
     * @memberof ImsUser
     */
    accountIdentifier?: string | null;
    /**
     * Bit to verify is the user is active or not (logic deletion)
     * @type {boolean}
     * @memberof ImsUser
     */
    imsUserIsDeleted?: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {any}
     * @memberof InlineObject
     */
    file?: any;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {any}
     * @memberof InlineObject1
     */
    file?: any;
}
/**
 * 
 * @export
 * @interface JRSCoa
 */
export interface JRSCoa {
    /**
     * 
     * @type {string}
     * @memberof JRSCoa
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof JRSCoa
     */
    pmSJRSCOACODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JRSCoa
     */
    pmSJRSCOADESCRIPTION?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JRSCoa
     */
    pmSJRSCOATYPE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JRSCoa
     */
    pmSJRSCOACATEGORY?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof JRSCoa
     */
    pmSJRSCOANAVUPDATEDATE?: Date;
    /**
     * 
     * @type {number}
     * @memberof JRSCoa
     */
    pmSJRSCOAENABLED?: number;
}
/**
 * 
 * @export
 * @interface JsClassBE
 */
export interface JsClassBE {
    /**
     * 
     * @type {Array<NavBudgetEntry>}
     * @memberof JsClassBE
     */
    value?: Array<NavBudgetEntry> | null;
    /**
     * 
     * @type {string}
     * @memberof JsClassBE
     */
    odatacontext?: string | null;
}
/**
 * 
 * @export
 * @interface JsClassCL
 */
export interface JsClassCL {
    /**
     * 
     * @type {Array<NavCompanyList>}
     * @memberof JsClassCL
     */
    value?: Array<NavCompanyList> | null;
    /**
     * 
     * @type {string}
     * @memberof JsClassCL
     */
    odatacontext?: string | null;
}
/**
 * 
 * @export
 * @interface JsClassDim
 */
export interface JsClassDim {
    /**
     * 
     * @type {Array<NavDimension1>}
     * @memberof JsClassDim
     */
    value?: Array<NavDimension1> | null;
    /**
     * 
     * @type {string}
     * @memberof JsClassDim
     */
    odatacontext?: string | null;
}
/**
 * 
 * @export
 * @interface JsClassGLS
 */
export interface JsClassGLS {
    /**
     * 
     * @type {Array<NavGLS>}
     * @memberof JsClassGLS
     */
    value?: Array<NavGLS> | null;
    /**
     * 
     * @type {string}
     * @memberof JsClassGLS
     */
    odatacontext?: string | null;
}
/**
 * 
 * @export
 * @interface JsLedger
 */
export interface JsLedger {
    /**
     * 
     * @type {string}
     * @memberof JsLedger
     */
    odatacontext?: string | null;
    /**
     * 
     * @type {Array<NavOdataLedger>}
     * @memberof JsLedger
     */
    value?: Array<NavOdataLedger> | null;
}
/**
 * 
 * @export
 * @interface LoginData
 */
export interface LoginData {
    /**
     * 
     * @type {Array<string>}
     * @memberof LoginData
     */
    requestedScopes?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface Menu
 */
export interface Menu {
    /**
     * 
     * @type {number}
     * @memberof Menu
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Menu
     */
    descr?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Menu
     */
    url?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Menu
     */
    parentMenuId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Menu
     */
    labelKey?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Menu
     */
    iconCode?: string | null;
    /**
     * 
     * @type {Array<Menu>}
     * @memberof Menu
     */
    inverseParentMenu?: Array<Menu> | null;
    /**
     * 
     * @type {number}
     * @memberof Menu
     */
    ordinalPosition?: number;
    /**
     * Reference to module
     * @type {number}
     * @memberof Menu
     */
    moduleId?: number | null;
    /**
     * Name of the module
     * @type {string}
     * @memberof Menu
     */
    moduleName?: string | null;
    /**
     * Code of the module
     * @type {string}
     * @memberof Menu
     */
    moduleCode?: string | null;
    /**
     * Defines a hidden menu item.  The menu will not be accessible through the navigation tree.
     * @type {boolean}
     * @memberof Menu
     */
    isHidden?: boolean | null;
}
/**
 * 
 * @export
 * @interface NavBudget1
 */
export interface NavBudget1 {
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    key?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGNAME?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMACCNUM?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMDATE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMGBLDIM1CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMGBLDIM2CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMAMOUNT?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMDESCRIPTION?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM1CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM2CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM3CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM4CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM5CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM6CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM7CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM8CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM9CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM10CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM11CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM12CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM13CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMBDGDIM14CODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMMEASUREUNITCODE?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMQUANTITY?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMUNITCOST?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMENTRYNMB?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMLASTMODDT?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMDELETED?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudget1
     */
    pMCOMPANY?: string | null;
}
/**
 * 
 * @export
 * @interface NavBudgetEntry
 */
export interface NavBudgetEntry {
    /**
     * 
     * @type {number}
     * @memberof NavBudgetEntry
     */
    entryNo?: number;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    budgetName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    gLAccountNo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    date?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    globalDimension1Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    globalDimension2Code?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NavBudgetEntry
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    businessUnitCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    userID?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    budgetDimension1Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    budgetDimension2Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    budgetDimension3Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    budgetDimension4Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    lastDateModified?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NavBudgetEntry
     */
    dimensionSetID?: number;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension3Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension4Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension5Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension6Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension7Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension8Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension9Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension10Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension11Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension12Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension13Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension14Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension15Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavBudgetEntry
     */
    shortcutDimension16Code?: string | null;
}
/**
 * 
 * @export
 * @interface NavCompanyList
 */
export interface NavCompanyList {
    /**
     * 
     * @type {string}
     * @memberof NavCompanyList
     */
    name?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof NavCompanyList
     */
    evaluationCompany?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NavCompanyList
     */
    displayName?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof NavCompanyList
     */
    masterCompany?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NavCompanyList
     */
    registryToPropagate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NavCompanyList
     */
    pbICompany?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NavCompanyList
     */
    internationalOffice?: boolean;
}
/**
 * 
 * @export
 * @interface NavDimension1
 */
export interface NavDimension1 {
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    dimensionCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    dimensionValueType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    totaling?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof NavDimension1
     */
    blocked?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    consolidationCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NavDimension1
     */
    indentation?: number;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    globalDimensionNo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    maptoICDimensionCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    maptoICDimensionValueCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NavDimension1
     */
    dimensionValueID?: number;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    id?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof NavDimension1
     */
    lastModifiedDateTime?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof NavDimension1
     */
    mappingCatOfIntervention?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    catOfInterventionCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    projectCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    company?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavDimension1
     */
    guid?: string | null;
}
/**
 * 
 * @export
 * @interface NavGLS
 */
export interface NavGLS {
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    primaryKey?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    lcYCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    localCurrencyDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    globalDimension1Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    globalDimension2Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension3Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension4Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension5Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension6Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension7Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension8Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension9Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension10Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension11Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension12Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension13Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension14Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension15Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavGLS
     */
    shortcutDimension16Code?: string | null;
}
/**
 * 
 * @export
 * @interface NavOdataLedger
 */
export interface NavOdataLedger {
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    primaryKey?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    lcYCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    localCurrencyDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    globalDimension1Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    globalDimension2Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension3Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension4Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension5Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension6Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension7Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension8Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension9Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension10Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension11Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension12Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension13Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension14Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension15Code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavOdataLedger
     */
    shortcutDimension16Code?: string | null;
}
/**
 * 
 * @export
 * @interface NavPayload
 */
export interface NavPayload {
    /**
     * 
     * @type {string}
     * @memberof NavPayload
     */
    data?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NavPayload
     */
    info?: string | null;
}
/**
 * 
 * @export
 * @interface PmsAnnualPlan
 */
export interface PmsAnnualPlan {
    /**
     * 
     * @type {number}
     * @memberof PmsAnnualPlan
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    apcode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    officeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    officeCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    codeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    descr?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    locationDescr?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    adminAreaId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    adminAreaName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    startYear?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    endYear?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    statusId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    statusName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    currencyCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    locationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    locationDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    activationState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    country?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsAnnualPlan
     */
    guid?: string | null;
}
/**
 * 
 * @export
 * @interface PmsCategoryOfIntervention
 */
export interface PmsCategoryOfIntervention {
    /**
     * 
     * @type {number}
     * @memberof PmsCategoryOfIntervention
     */
    pmsCoiId?: number;
    /**
     * 
     * @type {string}
     * @memberof PmsCategoryOfIntervention
     */
    pmsCoiCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PmsCategoryOfIntervention
     */
    pmsCoiDescriptionLabelId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PmsCategoryOfIntervention
     */
    pmsCoiEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PmsCategoryOfIntervention
     */
    pmsCoiDeleted?: boolean;
    /**
     * 
     * @type {Array<PmsCoiTosRel>}
     * @memberof PmsCategoryOfIntervention
     */
    pmsCoiTosRel?: Array<PmsCoiTosRel> | null;
}
/**
 * 
 * @export
 * @interface PmsCoiTosRel
 */
export interface PmsCoiTosRel {
    /**
     * 
     * @type {number}
     * @memberof PmsCoiTosRel
     */
    pmsCoiTosId?: number;
    /**
     * 
     * @type {number}
     * @memberof PmsCoiTosRel
     */
    pmsCoiId?: number;
    /**
     * 
     * @type {number}
     * @memberof PmsCoiTosRel
     */
    pmsTosId?: number;
    /**
     * 
     * @type {PmsCategoryOfIntervention}
     * @memberof PmsCoiTosRel
     */
    pmsCoi?: PmsCategoryOfIntervention | null;
    /**
     * 
     * @type {PmsTypeOfService}
     * @memberof PmsCoiTosRel
     */
    pmsTos?: PmsTypeOfService | null;
}
/**
 * 
 * @export
 * @interface PmsProjectWorkFlow
 */
export interface PmsProjectWorkFlow {
    /**
     * 
     * @type {number}
     * @memberof PmsProjectWorkFlow
     */
    previousStatus?: number;
    /**
     * 
     * @type {number}
     * @memberof PmsProjectWorkFlow
     */
    nextStatus?: number;
}
/**
 * 
 * @export
 * @interface PmsTypeOfService
 */
export interface PmsTypeOfService {
    /**
     * 
     * @type {number}
     * @memberof PmsTypeOfService
     */
    pmsTosId?: number;
    /**
     * 
     * @type {string}
     * @memberof PmsTypeOfService
     */
    pmsTosCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PmsTypeOfService
     */
    pmsTosDescription?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PmsTypeOfService
     */
    pmsTosEnabled?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PmsTypeOfService
     */
    pmsTosDeleted?: boolean;
    /**
     * 
     * @type {Array<PmsCoiTosRel>}
     * @memberof PmsTypeOfService
     */
    pmsCoiTosRel?: Array<PmsCoiTosRel> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum RuleOperator {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5
}

/**
 * 
 * @export
 * @interface SfipActivity
 */
export interface SfipActivity {
    /**
     * 
     * @type {number}
     * @memberof SfipActivity
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SfipActivity
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SfipActivity
     */
    descr?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SfipActivity
     */
    indicatorId?: number;
    /**
     * 
     * @type {number}
     * @memberof SfipActivity
     */
    officeId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SfipActivity
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {SfipIndicator}
     * @memberof SfipActivity
     */
    indicator?: SfipIndicator | null;
    /**
     * 
     * @type {Array<SfipActivitySchedule>}
     * @memberof SfipActivity
     */
    sfipActivitySchedules?: Array<SfipActivitySchedule> | null;
}
/**
 * 
 * @export
 * @interface SfipActivitySchedule
 */
export interface SfipActivitySchedule {
    /**
     * 
     * @type {number}
     * @memberof SfipActivitySchedule
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof SfipActivitySchedule
     */
    activityId?: number;
    /**
     * 
     * @type {number}
     * @memberof SfipActivitySchedule
     */
    scheduleYear?: number;
    /**
     * 
     * @type {number}
     * @memberof SfipActivitySchedule
     */
    scheduleQuarterLookupId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SfipActivitySchedule
     */
    isDeleted?: boolean | null;
    /**
     * 
     * @type {SfipActivity}
     * @memberof SfipActivitySchedule
     */
    activity?: SfipActivity | null;
    /**
     * 
     * @type {ImsLookup}
     * @memberof SfipActivitySchedule
     */
    scheduleQuarterLookup?: ImsLookup | null;
}
/**
 * 
 * @export
 * @interface SfipGoal
 */
export interface SfipGoal {
    /**
     * 
     * @type {number}
     * @memberof SfipGoal
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SfipGoal
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SfipGoal
     */
    formulation?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SfipGoal
     */
    priorityId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SfipGoal
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {SfipPriority}
     * @memberof SfipGoal
     */
    priority?: SfipPriority | null;
    /**
     * 
     * @type {Array<SfipObjective>}
     * @memberof SfipGoal
     */
    objectiveList?: Array<SfipObjective> | null;
}
/**
 * 
 * @export
 * @interface SfipIndicator
 */
export interface SfipIndicator {
    /**
     * 
     * @type {number}
     * @memberof SfipIndicator
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SfipIndicator
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SfipIndicator
     */
    formulation?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SfipIndicator
     */
    objectiveId?: number;
    /**
     * 
     * @type {number}
     * @memberof SfipIndicator
     */
    sfipId?: number;
    /**
     * 
     * @type {string}
     * @memberof SfipIndicator
     */
    value1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SfipIndicator
     */
    value2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SfipIndicator
     */
    value3?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SfipIndicator
     */
    value4?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SfipIndicator
     */
    value5?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SfipIndicator
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {SfipObjective}
     * @memberof SfipIndicator
     */
    objective?: SfipObjective | null;
    /**
     * 
     * @type {SfipPlan}
     * @memberof SfipIndicator
     */
    plan?: SfipPlan | null;
    /**
     * 
     * @type {Array<SfipActivity>}
     * @memberof SfipIndicator
     */
    activityList?: Array<SfipActivity> | null;
    /**
     * 
     * @type {Array<SfipIndicatorOffice>}
     * @memberof SfipIndicator
     */
    indicatorOfficeList?: Array<SfipIndicatorOffice> | null;
}
/**
 * 
 * @export
 * @interface SfipIndicatorOffice
 */
export interface SfipIndicatorOffice {
    /**
     * 
     * @type {number}
     * @memberof SfipIndicatorOffice
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof SfipIndicatorOffice
     */
    indicatorId?: number;
    /**
     * 
     * @type {number}
     * @memberof SfipIndicatorOffice
     */
    officeId?: number;
    /**
     * 
     * @type {SfipIndicator}
     * @memberof SfipIndicatorOffice
     */
    indicator?: SfipIndicator | null;
}
/**
 * 
 * @export
 * @interface SfipObjective
 */
export interface SfipObjective {
    /**
     * 
     * @type {number}
     * @memberof SfipObjective
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SfipObjective
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SfipObjective
     */
    formulation?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SfipObjective
     */
    goalId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SfipObjective
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {SfipGoal}
     * @memberof SfipObjective
     */
    goal?: SfipGoal | null;
    /**
     * 
     * @type {Array<SfipIndicator>}
     * @memberof SfipObjective
     */
    indicatorList?: Array<SfipIndicator> | null;
}
/**
 * 
 * @export
 * @interface SfipPlan
 */
export interface SfipPlan {
    /**
     * 
     * @type {number}
     * @memberof SfipPlan
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SfipPlan
     */
    code?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SfipPlan
     */
    startYear?: number;
    /**
     * 
     * @type {number}
     * @memberof SfipPlan
     */
    endYear?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SfipPlan
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {Array<SfipIndicator>}
     * @memberof SfipPlan
     */
    indicarotList?: Array<SfipIndicator> | null;
}
/**
 * 
 * @export
 * @interface SfipPriority
 */
export interface SfipPriority {
    /**
     * 
     * @type {number}
     * @memberof SfipPriority
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SfipPriority
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SfipPriority
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SfipPriority
     */
    formulation?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SfipPriority
     */
    prioritySetId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SfipPriority
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {SfipPrioritySet}
     * @memberof SfipPriority
     */
    prioritySet?: SfipPrioritySet | null;
    /**
     * 
     * @type {Array<SfipGoal>}
     * @memberof SfipPriority
     */
    goalList?: Array<SfipGoal> | null;
}
/**
 * 
 * @export
 * @interface SfipPrioritySet
 */
export interface SfipPrioritySet {
    /**
     * 
     * @type {number}
     * @memberof SfipPrioritySet
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SfipPrioritySet
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SfipPrioritySet
     */
    name?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SfipPrioritySet
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {Array<SfipPriority>}
     * @memberof SfipPrioritySet
     */
    priorityList?: Array<SfipPriority> | null;
}
/**
 * Type of actions for sql SP.
 * @export
 * @enum {string}
 */
export enum SqlActionType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3
}

/**
 * 
 * @export
 * @interface Test
 */
export interface Test {
    /**
     * 
     * @type {number}
     * @memberof Test
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Test
     */
    descr?: string | null;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    userUid?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    token?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    refreshToken?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    localCode?: string | null;
}

/**
 * AnnualPlanDocApi - axios parameter creator
 * @export
 */
export const AnnualPlanDocApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {number} [versionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnnualPlanDocIdGet(id: number, versionId?: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiAnnualPlanDocIdGet.');
            }
            const localVarPath = `/api/AnnualPlanDoc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['version_id'] = versionId;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnualPlanDocApi - functional programming interface
 * @export
 */
export const AnnualPlanDocApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {number} [versionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnnualPlanDocIdGet(id: number, versionId?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = AnnualPlanDocApiAxiosParamCreator(configuration).apiAnnualPlanDocIdGet(id, versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnnualPlanDocApi - factory interface
 * @export
 */
export const AnnualPlanDocApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {number} [versionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnnualPlanDocIdGet(id: number, versionId?: number, options?: any) {
            return AnnualPlanDocApiFp(configuration).apiAnnualPlanDocIdGet(id, versionId, options)(axios, basePath);
        },
    };
};

/**
 * AnnualPlanDocApi - object-oriented interface
 * @export
 * @class AnnualPlanDocApi
 * @extends {BaseAPI}
 */
export class AnnualPlanDocApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {number} [versionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnualPlanDocApi
     */
    public apiAnnualPlanDocIdGet(id: number, versionId?: number, options?: any) {
        return AnnualPlanDocApiFp(this.configuration).apiAnnualPlanDocIdGet(id, versionId, options)(this.axios, this.basePath);
    }

}


/**
 * AnnualPlanDocGeneratorApi - axios parameter creator
 * @export
 */
export const AnnualPlanDocGeneratorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {number} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnnualPlanDocGeneratorIdGet(id: number, version?: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiAnnualPlanDocGeneratorIdGet.');
            }
            const localVarPath = `/api/AnnualPlanDocGenerator/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnualPlanDocGeneratorApi - functional programming interface
 * @export
 */
export const AnnualPlanDocGeneratorApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {number} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnnualPlanDocGeneratorIdGet(id: number, version?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AnnualPlanDocGeneratorApiAxiosParamCreator(configuration).apiAnnualPlanDocGeneratorIdGet(id, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnnualPlanDocGeneratorApi - factory interface
 * @export
 */
export const AnnualPlanDocGeneratorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {number} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnnualPlanDocGeneratorIdGet(id: number, version?: number, options?: any) {
            return AnnualPlanDocGeneratorApiFp(configuration).apiAnnualPlanDocGeneratorIdGet(id, version, options)(axios, basePath);
        },
    };
};

/**
 * AnnualPlanDocGeneratorApi - object-oriented interface
 * @export
 * @class AnnualPlanDocGeneratorApi
 * @extends {BaseAPI}
 */
export class AnnualPlanDocGeneratorApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {number} [version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnualPlanDocGeneratorApi
     */
    public apiAnnualPlanDocGeneratorIdGet(id: number, version?: number, options?: any) {
        return AnnualPlanDocGeneratorApiFp(this.configuration).apiAnnualPlanDocGeneratorIdGet(id, version, options)(this.axios, this.basePath);
    }

}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {LoginData} [loginData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginextPost(username?: string, loginData?: LoginData, options: any = {}): RequestArgs {
            const localVarPath = `/api/Auth/loginext`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof loginData !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(loginData !== undefined ? loginData : {}) : (loginData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authentication method
         * @param {string} [username] Username
         * @param {string} [body] Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(username?: string, body?: string, options: any = {}): RequestArgs {
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authentication using Microsoft Azure AD
         * @param {string} [accountIdentifier] accountIdentifier
         * @param {boolean} [useUsername] Defines if the method param \&quot;accountIdentifier\&quot; is the \&quot;userName\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginFromAzure(accountIdentifier?: string, useUsername?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/loginFromAzure`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (accountIdentifier !== undefined) {
                localVarQueryParameter['accountIdentifier'] = accountIdentifier;
            }

            if (useUsername !== undefined) {
                localVarQueryParameter['useUsername'] = useUsername;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate and save new JwtToken and RefreshToken returning them to the caller
         * @param {string} [token] expired authorization token
         * @param {string} [refreshToken] user\&#39;s refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(token?: string, refreshToken?: string, options: any = {}): RequestArgs {
            const localVarPath = `/refresh-token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (refreshToken !== undefined) {
                localVarQueryParameter['refreshToken'] = refreshToken;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {LoginData} [loginData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginextPost(username?: string, loginData?: LoginData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).apiAuthLoginextPost(username, loginData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Authentication method
         * @param {string} [username] Username
         * @param {string} [body] Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(username?: string, body?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).login(username, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Authentication using Microsoft Azure AD
         * @param {string} [accountIdentifier] accountIdentifier
         * @param {boolean} [useUsername] Defines if the method param \&quot;accountIdentifier\&quot; is the \&quot;userName\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginFromAzure(accountIdentifier?: string, useUsername?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).loginFromAzure(accountIdentifier, useUsername, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Generate and save new JwtToken and RefreshToken returning them to the caller
         * @param {string} [token] expired authorization token
         * @param {string} [refreshToken] user\&#39;s refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(token?: string, refreshToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).refreshToken(token, refreshToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {LoginData} [loginData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginextPost(username?: string, loginData?: LoginData, options?: any) {
            return AuthApiFp(configuration).apiAuthLoginextPost(username, loginData, options)(axios, basePath);
        },
        /**
         * 
         * @summary Authentication method
         * @param {string} [username] Username
         * @param {string} [body] Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(username?: string, body?: string, options?: any) {
            return AuthApiFp(configuration).login(username, body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Authentication using Microsoft Azure AD
         * @param {string} [accountIdentifier] accountIdentifier
         * @param {boolean} [useUsername] Defines if the method param \&quot;accountIdentifier\&quot; is the \&quot;userName\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginFromAzure(accountIdentifier?: string, useUsername?: boolean, options?: any) {
            return AuthApiFp(configuration).loginFromAzure(accountIdentifier, useUsername, options)(axios, basePath);
        },
        /**
         * 
         * @summary Generate and save new JwtToken and RefreshToken returning them to the caller
         * @param {string} [token] expired authorization token
         * @param {string} [refreshToken] user\&#39;s refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(token?: string, refreshToken?: string, options?: any) {
            return AuthApiFp(configuration).refreshToken(token, refreshToken, options)(axios, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {string} [username] 
     * @param {LoginData} [loginData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginextPost(username?: string, loginData?: LoginData, options?: any) {
        return AuthApiFp(this.configuration).apiAuthLoginextPost(username, loginData, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Authentication method
     * @param {string} [username] Username
     * @param {string} [body] Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(username?: string, body?: string, options?: any) {
        return AuthApiFp(this.configuration).login(username, body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Authentication using Microsoft Azure AD
     * @param {string} [accountIdentifier] accountIdentifier
     * @param {boolean} [useUsername] Defines if the method param \&quot;accountIdentifier\&quot; is the \&quot;userName\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginFromAzure(accountIdentifier?: string, useUsername?: boolean, options?: any) {
        return AuthApiFp(this.configuration).loginFromAzure(accountIdentifier, useUsername, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Generate and save new JwtToken and RefreshToken returning them to the caller
     * @param {string} [token] expired authorization token
     * @param {string} [refreshToken] user\&#39;s refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(token?: string, refreshToken?: string, options?: any) {
        return AuthApiFp(this.configuration).refreshToken(token, refreshToken, options)(this.axios, this.basePath);
    }

}


/**
 * BlobStorageAzureApi - axios parameter creator
 * @export
 */
export const BlobStorageAzureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary DElete file in Blob Storage Azure
         * @param {string} [fileName] 
         * @param {string} [nameContainer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureDeleteFileFromContainerGet(fileName?: string, nameContainer?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/BlobStorageAzure/DeleteFileFromContainer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (nameContainer !== undefined) {
                localVarQueryParameter['nameContainer'] = nameContainer;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DElete specific version of the file in Blob Storage Azure
         * @param {string} [fileName] 
         * @param {string} [nameContainer] 
         * @param {string} [versionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureDeleteFileSpecificVersionFromContainerGet(fileName?: string, nameContainer?: string, versionId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/BlobStorageAzure/DeleteFileSpecificVersionFromContainer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (nameContainer !== undefined) {
                localVarQueryParameter['nameContainer'] = nameContainer;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download File in Blob Storage Azure
         * @param {string} [containerName] 
         * @param {string} [uniqueFileName] 
         * @param {string} [extension] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureDownloadFileFromContainerGet(containerName?: string, uniqueFileName?: string, extension?: string, fileName?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/BlobStorageAzure/DownloadFileFromContainer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (containerName !== undefined) {
                localVarQueryParameter['containerName'] = containerName;
            }

            if (uniqueFileName !== undefined) {
                localVarQueryParameter['UniqueFileName'] = uniqueFileName;
            }

            if (extension !== undefined) {
                localVarQueryParameter['extension'] = extension;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload File (New) to Container in Blob Storage Azure (Storage account needed)
         * @param {string} [nameContainer] 
         * @param {string} [folder] 
         * @param {string} [userUid] 
         * @param {number} [officeId] 
         * @param {number} [documentTypeId] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureUploadFileToContainerPost(nameContainer?: string, folder?: string, userUid?: string, officeId?: number, documentTypeId?: number, file?: any, options: any = {}): RequestArgs {
            const localVarPath = `/api/BlobStorageAzure/UploadFileToContainer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (nameContainer !== undefined) {
                localVarQueryParameter['nameContainer'] = nameContainer;
            }

            if (folder !== undefined) {
                localVarQueryParameter['folder'] = folder;
            }

            if (userUid !== undefined) {
                localVarQueryParameter['user_uid'] = userUid;
            }

            if (officeId !== undefined) {
                localVarQueryParameter['office_id'] = officeId;
            }

            if (documentTypeId !== undefined) {
                localVarQueryParameter['document_type_id'] = documentTypeId;
            }


            if (file !== undefined) {
                localVarFormParams.append('File', file as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload File to Container for overwriting of existing file in Blob Storage Azure (Storage account needed)  Warming : Same extension of file ( To read after downloading in correctly way)
         * @param {string} [nameContainer] 
         * @param {string} [folder] 
         * @param {string} [uniqueFileName] 
         * @param {string} [guidfile] 
         * @param {string} [guidUser] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureUploadOverwriteFileToContainerPost(nameContainer?: string, folder?: string, uniqueFileName?: string, guidfile?: string, guidUser?: string, file?: any, options: any = {}): RequestArgs {
            const localVarPath = `/api/BlobStorageAzure/UploadOverwriteFileToContainer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (nameContainer !== undefined) {
                localVarQueryParameter['nameContainer'] = nameContainer;
            }

            if (folder !== undefined) {
                localVarQueryParameter['folder'] = folder;
            }

            if (uniqueFileName !== undefined) {
                localVarQueryParameter['uniqueFileName'] = uniqueFileName;
            }

            if (guidfile !== undefined) {
                localVarQueryParameter['guidfile'] = guidfile;
            }

            if (guidUser !== undefined) {
                localVarQueryParameter['guidUser'] = guidUser;
            }


            if (file !== undefined) {
                localVarFormParams.append('File', file as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlobStorageAzureApi - functional programming interface
 * @export
 */
export const BlobStorageAzureApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary DElete file in Blob Storage Azure
         * @param {string} [fileName] 
         * @param {string} [nameContainer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureDeleteFileFromContainerGet(fileName?: string, nameContainer?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BlobStorageAzureApiAxiosParamCreator(configuration).apiBlobStorageAzureDeleteFileFromContainerGet(fileName, nameContainer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary DElete specific version of the file in Blob Storage Azure
         * @param {string} [fileName] 
         * @param {string} [nameContainer] 
         * @param {string} [versionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureDeleteFileSpecificVersionFromContainerGet(fileName?: string, nameContainer?: string, versionId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BlobStorageAzureApiAxiosParamCreator(configuration).apiBlobStorageAzureDeleteFileSpecificVersionFromContainerGet(fileName, nameContainer, versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Download File in Blob Storage Azure
         * @param {string} [containerName] 
         * @param {string} [uniqueFileName] 
         * @param {string} [extension] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureDownloadFileFromContainerGet(containerName?: string, uniqueFileName?: string, extension?: string, fileName?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BlobStorageAzureApiAxiosParamCreator(configuration).apiBlobStorageAzureDownloadFileFromContainerGet(containerName, uniqueFileName, extension, fileName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upload File (New) to Container in Blob Storage Azure (Storage account needed)
         * @param {string} [nameContainer] 
         * @param {string} [folder] 
         * @param {string} [userUid] 
         * @param {number} [officeId] 
         * @param {number} [documentTypeId] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureUploadFileToContainerPost(nameContainer?: string, folder?: string, userUid?: string, officeId?: number, documentTypeId?: number, file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BlobStorageAzureApiAxiosParamCreator(configuration).apiBlobStorageAzureUploadFileToContainerPost(nameContainer, folder, userUid, officeId, documentTypeId, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upload File to Container for overwriting of existing file in Blob Storage Azure (Storage account needed)  Warming : Same extension of file ( To read after downloading in correctly way)
         * @param {string} [nameContainer] 
         * @param {string} [folder] 
         * @param {string} [uniqueFileName] 
         * @param {string} [guidfile] 
         * @param {string} [guidUser] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureUploadOverwriteFileToContainerPost(nameContainer?: string, folder?: string, uniqueFileName?: string, guidfile?: string, guidUser?: string, file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BlobStorageAzureApiAxiosParamCreator(configuration).apiBlobStorageAzureUploadOverwriteFileToContainerPost(nameContainer, folder, uniqueFileName, guidfile, guidUser, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BlobStorageAzureApi - factory interface
 * @export
 */
export const BlobStorageAzureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary DElete file in Blob Storage Azure
         * @param {string} [fileName] 
         * @param {string} [nameContainer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureDeleteFileFromContainerGet(fileName?: string, nameContainer?: string, options?: any) {
            return BlobStorageAzureApiFp(configuration).apiBlobStorageAzureDeleteFileFromContainerGet(fileName, nameContainer, options)(axios, basePath);
        },
        /**
         * 
         * @summary DElete specific version of the file in Blob Storage Azure
         * @param {string} [fileName] 
         * @param {string} [nameContainer] 
         * @param {string} [versionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureDeleteFileSpecificVersionFromContainerGet(fileName?: string, nameContainer?: string, versionId?: string, options?: any) {
            return BlobStorageAzureApiFp(configuration).apiBlobStorageAzureDeleteFileSpecificVersionFromContainerGet(fileName, nameContainer, versionId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Download File in Blob Storage Azure
         * @param {string} [containerName] 
         * @param {string} [uniqueFileName] 
         * @param {string} [extension] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureDownloadFileFromContainerGet(containerName?: string, uniqueFileName?: string, extension?: string, fileName?: string, options?: any) {
            return BlobStorageAzureApiFp(configuration).apiBlobStorageAzureDownloadFileFromContainerGet(containerName, uniqueFileName, extension, fileName, options)(axios, basePath);
        },
        /**
         * 
         * @summary Upload File (New) to Container in Blob Storage Azure (Storage account needed)
         * @param {string} [nameContainer] 
         * @param {string} [folder] 
         * @param {string} [userUid] 
         * @param {number} [officeId] 
         * @param {number} [documentTypeId] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureUploadFileToContainerPost(nameContainer?: string, folder?: string, userUid?: string, officeId?: number, documentTypeId?: number, file?: any, options?: any) {
            return BlobStorageAzureApiFp(configuration).apiBlobStorageAzureUploadFileToContainerPost(nameContainer, folder, userUid, officeId, documentTypeId, file, options)(axios, basePath);
        },
        /**
         * 
         * @summary Upload File to Container for overwriting of existing file in Blob Storage Azure (Storage account needed)  Warming : Same extension of file ( To read after downloading in correctly way)
         * @param {string} [nameContainer] 
         * @param {string} [folder] 
         * @param {string} [uniqueFileName] 
         * @param {string} [guidfile] 
         * @param {string} [guidUser] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBlobStorageAzureUploadOverwriteFileToContainerPost(nameContainer?: string, folder?: string, uniqueFileName?: string, guidfile?: string, guidUser?: string, file?: any, options?: any) {
            return BlobStorageAzureApiFp(configuration).apiBlobStorageAzureUploadOverwriteFileToContainerPost(nameContainer, folder, uniqueFileName, guidfile, guidUser, file, options)(axios, basePath);
        },
    };
};

/**
 * BlobStorageAzureApi - object-oriented interface
 * @export
 * @class BlobStorageAzureApi
 * @extends {BaseAPI}
 */
export class BlobStorageAzureApi extends BaseAPI {
    /**
     * 
     * @summary DElete file in Blob Storage Azure
     * @param {string} [fileName] 
     * @param {string} [nameContainer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlobStorageAzureApi
     */
    public apiBlobStorageAzureDeleteFileFromContainerGet(fileName?: string, nameContainer?: string, options?: any) {
        return BlobStorageAzureApiFp(this.configuration).apiBlobStorageAzureDeleteFileFromContainerGet(fileName, nameContainer, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary DElete specific version of the file in Blob Storage Azure
     * @param {string} [fileName] 
     * @param {string} [nameContainer] 
     * @param {string} [versionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlobStorageAzureApi
     */
    public apiBlobStorageAzureDeleteFileSpecificVersionFromContainerGet(fileName?: string, nameContainer?: string, versionId?: string, options?: any) {
        return BlobStorageAzureApiFp(this.configuration).apiBlobStorageAzureDeleteFileSpecificVersionFromContainerGet(fileName, nameContainer, versionId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Download File in Blob Storage Azure
     * @param {string} [containerName] 
     * @param {string} [uniqueFileName] 
     * @param {string} [extension] 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlobStorageAzureApi
     */
    public apiBlobStorageAzureDownloadFileFromContainerGet(containerName?: string, uniqueFileName?: string, extension?: string, fileName?: string, options?: any) {
        return BlobStorageAzureApiFp(this.configuration).apiBlobStorageAzureDownloadFileFromContainerGet(containerName, uniqueFileName, extension, fileName, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Upload File (New) to Container in Blob Storage Azure (Storage account needed)
     * @param {string} [nameContainer] 
     * @param {string} [folder] 
     * @param {string} [userUid] 
     * @param {number} [officeId] 
     * @param {number} [documentTypeId] 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlobStorageAzureApi
     */
    public apiBlobStorageAzureUploadFileToContainerPost(nameContainer?: string, folder?: string, userUid?: string, officeId?: number, documentTypeId?: number, file?: any, options?: any) {
        return BlobStorageAzureApiFp(this.configuration).apiBlobStorageAzureUploadFileToContainerPost(nameContainer, folder, userUid, officeId, documentTypeId, file, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Upload File to Container for overwriting of existing file in Blob Storage Azure (Storage account needed)  Warming : Same extension of file ( To read after downloading in correctly way)
     * @param {string} [nameContainer] 
     * @param {string} [folder] 
     * @param {string} [uniqueFileName] 
     * @param {string} [guidfile] 
     * @param {string} [guidUser] 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlobStorageAzureApi
     */
    public apiBlobStorageAzureUploadOverwriteFileToContainerPost(nameContainer?: string, folder?: string, uniqueFileName?: string, guidfile?: string, guidUser?: string, file?: any, options?: any) {
        return BlobStorageAzureApiFp(this.configuration).apiBlobStorageAzureUploadOverwriteFileToContainerPost(nameContainer, folder, uniqueFileName, guidfile, guidUser, file, options)(this.axios, this.basePath);
    }

}


/**
 * ConfigGenericApi - axios parameter creator
 * @export
 */
export const ConfigGenericApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Copy Data from one Office to other Office (specific for JRS configuration stuff)
         * @param {string} [tableName] 
         * @param {string} [columnNameOffice] 
         * @param {number} [idOfficeFrom] 
         * @param {number} [idOfficeTo] 
         * @param {string} [columnNamePK] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyConfigurationFromToOffices(tableName?: string, columnNameOffice?: string, idOfficeFrom?: number, idOfficeTo?: number, columnNamePK?: string, options: any = {}): RequestArgs {
            const localVarPath = `/copy-config-from-to-offices`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (tableName !== undefined) {
                localVarQueryParameter['TableName'] = tableName;
            }

            if (columnNameOffice !== undefined) {
                localVarQueryParameter['ColumnNameOffice'] = columnNameOffice;
            }

            if (idOfficeFrom !== undefined) {
                localVarQueryParameter['IdOfficeFrom'] = idOfficeFrom;
            }

            if (idOfficeTo !== undefined) {
                localVarQueryParameter['IdOfficeTo'] = idOfficeTo;
            }

            if (columnNamePK !== undefined) {
                localVarQueryParameter['ColumnNamePK'] = columnNamePK;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigGenericApi - functional programming interface
 * @export
 */
export const ConfigGenericApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Copy Data from one Office to other Office (specific for JRS configuration stuff)
         * @param {string} [tableName] 
         * @param {string} [columnNameOffice] 
         * @param {number} [idOfficeFrom] 
         * @param {number} [idOfficeTo] 
         * @param {string} [columnNamePK] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyConfigurationFromToOffices(tableName?: string, columnNameOffice?: string, idOfficeFrom?: number, idOfficeTo?: number, columnNamePK?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ConfigGenericApiAxiosParamCreator(configuration).copyConfigurationFromToOffices(tableName, columnNameOffice, idOfficeFrom, idOfficeTo, columnNamePK, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConfigGenericApi - factory interface
 * @export
 */
export const ConfigGenericApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Copy Data from one Office to other Office (specific for JRS configuration stuff)
         * @param {string} [tableName] 
         * @param {string} [columnNameOffice] 
         * @param {number} [idOfficeFrom] 
         * @param {number} [idOfficeTo] 
         * @param {string} [columnNamePK] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyConfigurationFromToOffices(tableName?: string, columnNameOffice?: string, idOfficeFrom?: number, idOfficeTo?: number, columnNamePK?: string, options?: any) {
            return ConfigGenericApiFp(configuration).copyConfigurationFromToOffices(tableName, columnNameOffice, idOfficeFrom, idOfficeTo, columnNamePK, options)(axios, basePath);
        },
    };
};

/**
 * ConfigGenericApi - object-oriented interface
 * @export
 * @class ConfigGenericApi
 * @extends {BaseAPI}
 */
export class ConfigGenericApi extends BaseAPI {
    /**
     * 
     * @summary Copy Data from one Office to other Office (specific for JRS configuration stuff)
     * @param {string} [tableName] 
     * @param {string} [columnNameOffice] 
     * @param {number} [idOfficeFrom] 
     * @param {number} [idOfficeTo] 
     * @param {string} [columnNamePK] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigGenericApi
     */
    public copyConfigurationFromToOffices(tableName?: string, columnNameOffice?: string, idOfficeFrom?: number, idOfficeTo?: number, columnNamePK?: string, options?: any) {
        return ConfigGenericApiFp(this.configuration).copyConfigurationFromToOffices(tableName, columnNameOffice, idOfficeFrom, idOfficeTo, columnNamePK, options)(this.axios, this.basePath);
    }

}


/**
 * GMTApi - axios parameter creator
 * @export
 */
export const GMTApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} getGMTTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGMTGetGMTTemplateGet(getGMTTemplate: string, options: any = {}): RequestArgs {
            // verify required parameter 'getGMTTemplate' is not null or undefined
            if (getGMTTemplate === null || getGMTTemplate === undefined) {
                throw new RequiredError('getGMTTemplate', 'Required parameter getGMTTemplate was null or undefined when calling apiGMTGetGMTTemplateGet.');
            }
            const localVarPath = `/api/GMT/{GetGMTTemplate}`
                .replace(`{${"GetGMTTemplate"}}`, encodeURIComponent(String(getGMTTemplate)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GMTApi - functional programming interface
 * @export
 */
export const GMTApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} getGMTTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGMTGetGMTTemplateGet(getGMTTemplate: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GMTApiAxiosParamCreator(configuration).apiGMTGetGMTTemplateGet(getGMTTemplate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GMTApi - factory interface
 * @export
 */
export const GMTApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} getGMTTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGMTGetGMTTemplateGet(getGMTTemplate: string, options?: any) {
            return GMTApiFp(configuration).apiGMTGetGMTTemplateGet(getGMTTemplate, options)(axios, basePath);
        },
    };
};

/**
 * GMTApi - object-oriented interface
 * @export
 * @class GMTApi
 * @extends {BaseAPI}
 */
export class GMTApi extends BaseAPI {
    /**
     * 
     * @param {string} getGMTTemplate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GMTApi
     */
    public apiGMTGetGMTTemplateGet(getGMTTemplate: string, options?: any) {
        return GMTApiFp(this.configuration).apiGMTGetGMTTemplateGet(getGMTTemplate, options)(this.axios, this.basePath);
    }

}


/**
 * GenericSqlApi - axios parameter creator
 * @export
 */
export const GenericSqlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Execute a SP with the given payload.
         * @param {GenericSqlPayload} [genericSqlPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genericSqlSPCall(genericSqlPayload?: GenericSqlPayload, options: any = {}): RequestArgs {
            const localVarPath = `/generic-sql-sp-call`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof genericSqlPayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(genericSqlPayload !== undefined ? genericSqlPayload : {}) : (genericSqlPayload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute a query to the given view with the provided parameters.
         * @param {GenericSqlSelectPayload} [genericSqlSelectPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genericSqlSelect(genericSqlSelectPayload?: GenericSqlSelectPayload, options: any = {}): RequestArgs {
            const localVarPath = `/generic-sql-select`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof genericSqlSelectPayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(genericSqlSelectPayload !== undefined ? genericSqlSelectPayload : {}) : (genericSqlSelectPayload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the structure of the request Table/View.
         * @param {GenericSqlSelectPayload} [genericSqlSelectPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genericSqlSelectStructure(genericSqlSelectPayload?: GenericSqlSelectPayload, options: any = {}): RequestArgs {
            const localVarPath = `/generic-sql-select-structure`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof genericSqlSelectPayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(genericSqlSelectPayload !== undefined ? genericSqlSelectPayload : {}) : (genericSqlSelectPayload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate and download .docx file from the requested html.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordDocDownload(options: any = {}): RequestArgs {
            const localVarPath = `/doc-download`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenericSqlApi - functional programming interface
 * @export
 */
export const GenericSqlApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Execute a SP with the given payload.
         * @param {GenericSqlPayload} [genericSqlPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genericSqlSPCall(genericSqlPayload?: GenericSqlPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GenericSqlApiAxiosParamCreator(configuration).genericSqlSPCall(genericSqlPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Execute a query to the given view with the provided parameters.
         * @param {GenericSqlSelectPayload} [genericSqlSelectPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genericSqlSelect(genericSqlSelectPayload?: GenericSqlSelectPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GenericSqlApiAxiosParamCreator(configuration).genericSqlSelect(genericSqlSelectPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return the structure of the request Table/View.
         * @param {GenericSqlSelectPayload} [genericSqlSelectPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genericSqlSelectStructure(genericSqlSelectPayload?: GenericSqlSelectPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GenericSqlApiAxiosParamCreator(configuration).genericSqlSelectStructure(genericSqlSelectPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Generate and download .docx file from the requested html.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordDocDownload(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GenericSqlApiAxiosParamCreator(configuration).wordDocDownload(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GenericSqlApi - factory interface
 * @export
 */
export const GenericSqlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Execute a SP with the given payload.
         * @param {GenericSqlPayload} [genericSqlPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genericSqlSPCall(genericSqlPayload?: GenericSqlPayload, options?: any) {
            return GenericSqlApiFp(configuration).genericSqlSPCall(genericSqlPayload, options)(axios, basePath);
        },
        /**
         * 
         * @summary Execute a query to the given view with the provided parameters.
         * @param {GenericSqlSelectPayload} [genericSqlSelectPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genericSqlSelect(genericSqlSelectPayload?: GenericSqlSelectPayload, options?: any) {
            return GenericSqlApiFp(configuration).genericSqlSelect(genericSqlSelectPayload, options)(axios, basePath);
        },
        /**
         * 
         * @summary Return the structure of the request Table/View.
         * @param {GenericSqlSelectPayload} [genericSqlSelectPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genericSqlSelectStructure(genericSqlSelectPayload?: GenericSqlSelectPayload, options?: any) {
            return GenericSqlApiFp(configuration).genericSqlSelectStructure(genericSqlSelectPayload, options)(axios, basePath);
        },
        /**
         * 
         * @summary Generate and download .docx file from the requested html.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordDocDownload(options?: any) {
            return GenericSqlApiFp(configuration).wordDocDownload(options)(axios, basePath);
        },
    };
};

/**
 * GenericSqlApi - object-oriented interface
 * @export
 * @class GenericSqlApi
 * @extends {BaseAPI}
 */
export class GenericSqlApi extends BaseAPI {
    /**
     * 
     * @summary Execute a SP with the given payload.
     * @param {GenericSqlPayload} [genericSqlPayload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenericSqlApi
     */
    public genericSqlSPCall(genericSqlPayload?: GenericSqlPayload, options?: any) {
        return GenericSqlApiFp(this.configuration).genericSqlSPCall(genericSqlPayload, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Execute a query to the given view with the provided parameters.
     * @param {GenericSqlSelectPayload} [genericSqlSelectPayload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenericSqlApi
     */
    public genericSqlSelect(genericSqlSelectPayload?: GenericSqlSelectPayload, options?: any) {
        return GenericSqlApiFp(this.configuration).genericSqlSelect(genericSqlSelectPayload, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Return the structure of the request Table/View.
     * @param {GenericSqlSelectPayload} [genericSqlSelectPayload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenericSqlApi
     */
    public genericSqlSelectStructure(genericSqlSelectPayload?: GenericSqlSelectPayload, options?: any) {
        return GenericSqlApiFp(this.configuration).genericSqlSelectStructure(genericSqlSelectPayload, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Generate and download .docx file from the requested html.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenericSqlApi
     */
    public wordDocDownload(options?: any) {
        return GenericSqlApiFp(this.configuration).wordDocDownload(options)(this.axios, this.basePath);
    }

}


/**
 * HrBiodataApi - axios parameter creator
 * @export
 */
export const HrBiodataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/HrBiodata`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiHrBiodataIdDelete.');
            }
            const localVarPath = `/api/HrBiodata/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiHrBiodataIdGet.');
            }
            const localVarPath = `/api/HrBiodata/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {HrBiodata} [hrBiodata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataIdPut(id: number, hrBiodata?: HrBiodata, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiHrBiodataIdPut.');
            }
            const localVarPath = `/api/HrBiodata/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof hrBiodata !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(hrBiodata !== undefined ? hrBiodata : {}) : (hrBiodata || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HrBiodata} [hrBiodata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataPost(hrBiodata?: HrBiodata, options: any = {}): RequestArgs {
            const localVarPath = `/api/HrBiodata`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof hrBiodata !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(hrBiodata !== undefined ? hrBiodata : {}) : (hrBiodata || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HrBiodataApi - functional programming interface
 * @export
 */
export const HrBiodataApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HrBiodata>> {
            const localVarAxiosArgs = HrBiodataApiAxiosParamCreator(configuration).apiHrBiodataGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HrBiodata> {
            const localVarAxiosArgs = HrBiodataApiAxiosParamCreator(configuration).apiHrBiodataIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HrBiodata> {
            const localVarAxiosArgs = HrBiodataApiAxiosParamCreator(configuration).apiHrBiodataIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {HrBiodata} [hrBiodata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataIdPut(id: number, hrBiodata?: HrBiodata, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = HrBiodataApiAxiosParamCreator(configuration).apiHrBiodataIdPut(id, hrBiodata, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {HrBiodata} [hrBiodata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataPost(hrBiodata?: HrBiodata, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HrBiodata> {
            const localVarAxiosArgs = HrBiodataApiAxiosParamCreator(configuration).apiHrBiodataPost(hrBiodata, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HrBiodataApi - factory interface
 * @export
 */
export const HrBiodataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataGet(options?: any) {
            return HrBiodataApiFp(configuration).apiHrBiodataGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataIdDelete(id: number, options?: any) {
            return HrBiodataApiFp(configuration).apiHrBiodataIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataIdGet(id: number, options?: any) {
            return HrBiodataApiFp(configuration).apiHrBiodataIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {HrBiodata} [hrBiodata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataIdPut(id: number, hrBiodata?: HrBiodata, options?: any) {
            return HrBiodataApiFp(configuration).apiHrBiodataIdPut(id, hrBiodata, options)(axios, basePath);
        },
        /**
         * 
         * @param {HrBiodata} [hrBiodata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrBiodataPost(hrBiodata?: HrBiodata, options?: any) {
            return HrBiodataApiFp(configuration).apiHrBiodataPost(hrBiodata, options)(axios, basePath);
        },
    };
};

/**
 * HrBiodataApi - object-oriented interface
 * @export
 * @class HrBiodataApi
 * @extends {BaseAPI}
 */
export class HrBiodataApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrBiodataApi
     */
    public apiHrBiodataGet(options?: any) {
        return HrBiodataApiFp(this.configuration).apiHrBiodataGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrBiodataApi
     */
    public apiHrBiodataIdDelete(id: number, options?: any) {
        return HrBiodataApiFp(this.configuration).apiHrBiodataIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrBiodataApi
     */
    public apiHrBiodataIdGet(id: number, options?: any) {
        return HrBiodataApiFp(this.configuration).apiHrBiodataIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {HrBiodata} [hrBiodata] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrBiodataApi
     */
    public apiHrBiodataIdPut(id: number, hrBiodata?: HrBiodata, options?: any) {
        return HrBiodataApiFp(this.configuration).apiHrBiodataIdPut(id, hrBiodata, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {HrBiodata} [hrBiodata] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrBiodataApi
     */
    public apiHrBiodataPost(hrBiodata?: HrBiodata, options?: any) {
        return HrBiodataApiFp(this.configuration).apiHrBiodataPost(hrBiodata, options)(this.axios, this.basePath);
    }

}


/**
 * HrGendersApi - axios parameter creator
 * @export
 */
export const HrGendersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrGendersGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/HrGenders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrGendersIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiHrGendersIdGet.');
            }
            const localVarPath = `/api/HrGenders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HrGendersApi - functional programming interface
 * @export
 */
export const HrGendersApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrGendersGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HrGender>> {
            const localVarAxiosArgs = HrGendersApiAxiosParamCreator(configuration).apiHrGendersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrGendersIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HrGender> {
            const localVarAxiosArgs = HrGendersApiAxiosParamCreator(configuration).apiHrGendersIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HrGendersApi - factory interface
 * @export
 */
export const HrGendersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrGendersGet(options?: any) {
            return HrGendersApiFp(configuration).apiHrGendersGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrGendersIdGet(id: number, options?: any) {
            return HrGendersApiFp(configuration).apiHrGendersIdGet(id, options)(axios, basePath);
        },
    };
};

/**
 * HrGendersApi - object-oriented interface
 * @export
 * @class HrGendersApi
 * @extends {BaseAPI}
 */
export class HrGendersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrGendersApi
     */
    public apiHrGendersGet(options?: any) {
        return HrGendersApiFp(this.configuration).apiHrGendersGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrGendersApi
     */
    public apiHrGendersIdGet(id: number, options?: any) {
        return HrGendersApiFp(this.configuration).apiHrGendersIdGet(id, options)(this.axios, this.basePath);
    }

}


/**
 * HrOfficeApi - axios parameter creator
 * @export
 */
export const HrOfficeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSfipOfficeRelationsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/sfip/office-relations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {boolean} [includeChildren] 
         * @param {boolean} [includeDescendants] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHrOffice(officeId?: number, includeChildren?: boolean, includeDescendants?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/office`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }

            if (includeChildren !== undefined) {
                localVarQueryParameter['includeChildren'] = includeChildren;
            }

            if (includeDescendants !== undefined) {
                localVarQueryParameter['includeDescendants'] = includeDescendants;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HrOfficeApi - functional programming interface
 * @export
 */
export const HrOfficeApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSfipOfficeRelationsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HrOfficeRelation>> {
            const localVarAxiosArgs = HrOfficeApiAxiosParamCreator(configuration).apiSfipOfficeRelationsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {boolean} [includeChildren] 
         * @param {boolean} [includeDescendants] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHrOffice(officeId?: number, includeChildren?: boolean, includeDescendants?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HrOffice> {
            const localVarAxiosArgs = HrOfficeApiAxiosParamCreator(configuration).getHrOffice(officeId, includeChildren, includeDescendants, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HrOfficeApi - factory interface
 * @export
 */
export const HrOfficeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSfipOfficeRelationsGet(options?: any) {
            return HrOfficeApiFp(configuration).apiSfipOfficeRelationsGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {boolean} [includeChildren] 
         * @param {boolean} [includeDescendants] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHrOffice(officeId?: number, includeChildren?: boolean, includeDescendants?: boolean, options?: any) {
            return HrOfficeApiFp(configuration).getHrOffice(officeId, includeChildren, includeDescendants, options)(axios, basePath);
        },
    };
};

/**
 * HrOfficeApi - object-oriented interface
 * @export
 * @class HrOfficeApi
 * @extends {BaseAPI}
 */
export class HrOfficeApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrOfficeApi
     */
    public apiSfipOfficeRelationsGet(options?: any) {
        return HrOfficeApiFp(this.configuration).apiSfipOfficeRelationsGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [officeId] 
     * @param {boolean} [includeChildren] 
     * @param {boolean} [includeDescendants] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrOfficeApi
     */
    public getHrOffice(officeId?: number, includeChildren?: boolean, includeDescendants?: boolean, options?: any) {
        return HrOfficeApiFp(this.configuration).getHrOffice(officeId, includeChildren, includeDescendants, options)(this.axios, this.basePath);
    }

}


/**
 * HrPersonalTitlesApi - axios parameter creator
 * @export
 */
export const HrPersonalTitlesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/HrPersonalTitles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiHrPersonalTitlesIdDelete.');
            }
            const localVarPath = `/api/HrPersonalTitles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiHrPersonalTitlesIdGet.');
            }
            const localVarPath = `/api/HrPersonalTitles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {HrPersonalTitle} [hrPersonalTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesIdPut(id: number, hrPersonalTitle?: HrPersonalTitle, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiHrPersonalTitlesIdPut.');
            }
            const localVarPath = `/api/HrPersonalTitles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof hrPersonalTitle !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(hrPersonalTitle !== undefined ? hrPersonalTitle : {}) : (hrPersonalTitle || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HrPersonalTitle} [hrPersonalTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesPost(hrPersonalTitle?: HrPersonalTitle, options: any = {}): RequestArgs {
            const localVarPath = `/api/HrPersonalTitles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof hrPersonalTitle !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(hrPersonalTitle !== undefined ? hrPersonalTitle : {}) : (hrPersonalTitle || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HrPersonalTitlesApi - functional programming interface
 * @export
 */
export const HrPersonalTitlesApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HrPersonalTitle>> {
            const localVarAxiosArgs = HrPersonalTitlesApiAxiosParamCreator(configuration).apiHrPersonalTitlesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HrPersonalTitle> {
            const localVarAxiosArgs = HrPersonalTitlesApiAxiosParamCreator(configuration).apiHrPersonalTitlesIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HrPersonalTitle> {
            const localVarAxiosArgs = HrPersonalTitlesApiAxiosParamCreator(configuration).apiHrPersonalTitlesIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {HrPersonalTitle} [hrPersonalTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesIdPut(id: number, hrPersonalTitle?: HrPersonalTitle, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = HrPersonalTitlesApiAxiosParamCreator(configuration).apiHrPersonalTitlesIdPut(id, hrPersonalTitle, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {HrPersonalTitle} [hrPersonalTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesPost(hrPersonalTitle?: HrPersonalTitle, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HrPersonalTitle> {
            const localVarAxiosArgs = HrPersonalTitlesApiAxiosParamCreator(configuration).apiHrPersonalTitlesPost(hrPersonalTitle, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HrPersonalTitlesApi - factory interface
 * @export
 */
export const HrPersonalTitlesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesGet(options?: any) {
            return HrPersonalTitlesApiFp(configuration).apiHrPersonalTitlesGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesIdDelete(id: number, options?: any) {
            return HrPersonalTitlesApiFp(configuration).apiHrPersonalTitlesIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesIdGet(id: number, options?: any) {
            return HrPersonalTitlesApiFp(configuration).apiHrPersonalTitlesIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {HrPersonalTitle} [hrPersonalTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesIdPut(id: number, hrPersonalTitle?: HrPersonalTitle, options?: any) {
            return HrPersonalTitlesApiFp(configuration).apiHrPersonalTitlesIdPut(id, hrPersonalTitle, options)(axios, basePath);
        },
        /**
         * 
         * @param {HrPersonalTitle} [hrPersonalTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHrPersonalTitlesPost(hrPersonalTitle?: HrPersonalTitle, options?: any) {
            return HrPersonalTitlesApiFp(configuration).apiHrPersonalTitlesPost(hrPersonalTitle, options)(axios, basePath);
        },
    };
};

/**
 * HrPersonalTitlesApi - object-oriented interface
 * @export
 * @class HrPersonalTitlesApi
 * @extends {BaseAPI}
 */
export class HrPersonalTitlesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrPersonalTitlesApi
     */
    public apiHrPersonalTitlesGet(options?: any) {
        return HrPersonalTitlesApiFp(this.configuration).apiHrPersonalTitlesGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrPersonalTitlesApi
     */
    public apiHrPersonalTitlesIdDelete(id: number, options?: any) {
        return HrPersonalTitlesApiFp(this.configuration).apiHrPersonalTitlesIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrPersonalTitlesApi
     */
    public apiHrPersonalTitlesIdGet(id: number, options?: any) {
        return HrPersonalTitlesApiFp(this.configuration).apiHrPersonalTitlesIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {HrPersonalTitle} [hrPersonalTitle] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrPersonalTitlesApi
     */
    public apiHrPersonalTitlesIdPut(id: number, hrPersonalTitle?: HrPersonalTitle, options?: any) {
        return HrPersonalTitlesApiFp(this.configuration).apiHrPersonalTitlesIdPut(id, hrPersonalTitle, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {HrPersonalTitle} [hrPersonalTitle] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrPersonalTitlesApi
     */
    public apiHrPersonalTitlesPost(hrPersonalTitle?: HrPersonalTitle, options?: any) {
        return HrPersonalTitlesApiFp(this.configuration).apiHrPersonalTitlesPost(hrPersonalTitle, options)(this.axios, this.basePath);
    }

}


/**
 * ImsApi - axios parameter creator
 * @export
 */
export const ImsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [idLabelNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsGetImsLabelByIdGet(idLabelNumber?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/Ims/GetImsLabelById`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (idLabelNumber !== undefined) {
                localVarQueryParameter['id_label_number'] = idLabelNumber;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsGetImsLabelGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/Ims/GetImsLabel`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsGetImsLanguageGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/Ims/GetImsLanguage`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiImsIdGet.');
            }
            const localVarPath = `/api/Ims/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImsApi - functional programming interface
 * @export
 */
export const ImsApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [idLabelNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsGetImsLabelByIdGet(idLabelNumber?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsLabels>> {
            const localVarAxiosArgs = ImsApiAxiosParamCreator(configuration).apiImsGetImsLabelByIdGet(idLabelNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsGetImsLabelGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsLabels>> {
            const localVarAxiosArgs = ImsApiAxiosParamCreator(configuration).apiImsGetImsLabelGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsGetImsLanguageGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsLanguage>> {
            const localVarAxiosArgs = ImsApiAxiosParamCreator(configuration).apiImsGetImsLanguageGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImsLanguage> {
            const localVarAxiosArgs = ImsApiAxiosParamCreator(configuration).apiImsIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImsApi - factory interface
 * @export
 */
export const ImsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [idLabelNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsGetImsLabelByIdGet(idLabelNumber?: number, options?: any) {
            return ImsApiFp(configuration).apiImsGetImsLabelByIdGet(idLabelNumber, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsGetImsLabelGet(options?: any) {
            return ImsApiFp(configuration).apiImsGetImsLabelGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsGetImsLanguageGet(options?: any) {
            return ImsApiFp(configuration).apiImsGetImsLanguageGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsIdGet(id: number, options?: any) {
            return ImsApiFp(configuration).apiImsIdGet(id, options)(axios, basePath);
        },
    };
};

/**
 * ImsApi - object-oriented interface
 * @export
 * @class ImsApi
 * @extends {BaseAPI}
 */
export class ImsApi extends BaseAPI {
    /**
     * 
     * @param {number} [idLabelNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsApi
     */
    public apiImsGetImsLabelByIdGet(idLabelNumber?: number, options?: any) {
        return ImsApiFp(this.configuration).apiImsGetImsLabelByIdGet(idLabelNumber, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsApi
     */
    public apiImsGetImsLabelGet(options?: any) {
        return ImsApiFp(this.configuration).apiImsGetImsLabelGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsApi
     */
    public apiImsGetImsLanguageGet(options?: any) {
        return ImsApiFp(this.configuration).apiImsGetImsLanguageGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsApi
     */
    public apiImsIdGet(id: number, options?: any) {
        return ImsApiFp(this.configuration).apiImsIdGet(id, options)(this.axios, this.basePath);
    }

}


/**
 * ImsLookupsApi - axios parameter creator
 * @export
 */
export const ImsLookupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsLookupsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/ImsLookups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [listName] 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsLookupsGetGeneriListByCompanyGet(listName?: string, company?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/ImsLookups/GetGeneriListByCompany`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listName !== undefined) {
                localVarQueryParameter['ListName'] = listName;
            }

            if (company !== undefined) {
                localVarQueryParameter['Company'] = company;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} listName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsLookupsListNameGet(listName: string, options: any = {}): RequestArgs {
            // verify required parameter 'listName' is not null or undefined
            if (listName === null || listName === undefined) {
                throw new RequiredError('listName', 'Required parameter listName was null or undefined when calling apiImsLookupsListNameGet.');
            }
            const localVarPath = `/api/ImsLookups/{ListName}`
                .replace(`{${"ListName"}}`, encodeURIComponent(String(listName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImsLookupsApi - functional programming interface
 * @export
 */
export const ImsLookupsApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsLookupsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsLookup>> {
            const localVarAxiosArgs = ImsLookupsApiAxiosParamCreator(configuration).apiImsLookupsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [listName] 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsLookupsGetGeneriListByCompanyGet(listName?: string, company?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsList>> {
            const localVarAxiosArgs = ImsLookupsApiAxiosParamCreator(configuration).apiImsLookupsGetGeneriListByCompanyGet(listName, company, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} listName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsLookupsListNameGet(listName: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsList>> {
            const localVarAxiosArgs = ImsLookupsApiAxiosParamCreator(configuration).apiImsLookupsListNameGet(listName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImsLookupsApi - factory interface
 * @export
 */
export const ImsLookupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsLookupsGet(options?: any) {
            return ImsLookupsApiFp(configuration).apiImsLookupsGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [listName] 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsLookupsGetGeneriListByCompanyGet(listName?: string, company?: string, options?: any) {
            return ImsLookupsApiFp(configuration).apiImsLookupsGetGeneriListByCompanyGet(listName, company, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} listName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsLookupsListNameGet(listName: string, options?: any) {
            return ImsLookupsApiFp(configuration).apiImsLookupsListNameGet(listName, options)(axios, basePath);
        },
    };
};

/**
 * ImsLookupsApi - object-oriented interface
 * @export
 * @class ImsLookupsApi
 * @extends {BaseAPI}
 */
export class ImsLookupsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsLookupsApi
     */
    public apiImsLookupsGet(options?: any) {
        return ImsLookupsApiFp(this.configuration).apiImsLookupsGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [listName] 
     * @param {string} [company] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsLookupsApi
     */
    public apiImsLookupsGetGeneriListByCompanyGet(listName?: string, company?: string, options?: any) {
        return ImsLookupsApiFp(this.configuration).apiImsLookupsGetGeneriListByCompanyGet(listName, company, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} listName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsLookupsApi
     */
    public apiImsLookupsListNameGet(listName: string, options?: any) {
        return ImsLookupsApiFp(this.configuration).apiImsLookupsListNameGet(listName, options)(this.axios, this.basePath);
    }

}


/**
 * ImsQuestionnaireApi - axios parameter creator
 * @export
 */
export const ImsQuestionnaireApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Questionnaire
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {string} questionnaireCode Code of the questionnaire to recover.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireByCodeOfficeIdQuestionnaireCodeGet(officeId: number, questionnaireCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'officeId' is not null or undefined
            if (officeId === null || officeId === undefined) {
                throw new RequiredError('officeId', 'Required parameter officeId was null or undefined when calling apiQuestionnaireByCodeOfficeIdQuestionnaireCodeGet.');
            }
            // verify required parameter 'questionnaireCode' is not null or undefined
            if (questionnaireCode === null || questionnaireCode === undefined) {
                throw new RequiredError('questionnaireCode', 'Required parameter questionnaireCode was null or undefined when calling apiQuestionnaireByCodeOfficeIdQuestionnaireCodeGet.');
            }
            const localVarPath = `/api/questionnaire-by-code/{officeId}/{questionnaireCode}`
                .replace(`{${"officeId"}}`, encodeURIComponent(String(officeId)))
                .replace(`{${"questionnaireCode"}}`, encodeURIComponent(String(questionnaireCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Questionnaire
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {number} questionnaireId ID of the questionnaire to recover.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireByIdOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options: any = {}): RequestArgs {
            // verify required parameter 'officeId' is not null or undefined
            if (officeId === null || officeId === undefined) {
                throw new RequiredError('officeId', 'Required parameter officeId was null or undefined when calling apiQuestionnaireByIdOfficeIdQuestionnaireIdGet.');
            }
            // verify required parameter 'questionnaireId' is not null or undefined
            if (questionnaireId === null || questionnaireId === undefined) {
                throw new RequiredError('questionnaireId', 'Required parameter questionnaireId was null or undefined when calling apiQuestionnaireByIdOfficeIdQuestionnaireIdGet.');
            }
            const localVarPath = `/api/questionnaire-by-id/{officeId}/{questionnaireId}`
                .replace(`{${"officeId"}}`, encodeURIComponent(String(officeId)))
                .replace(`{${"questionnaireId"}}`, encodeURIComponent(String(questionnaireId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Questionnaire Instances
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {number} questionnaireId ID of the questionnaire to recover instances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireInstanceOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options: any = {}): RequestArgs {
            // verify required parameter 'officeId' is not null or undefined
            if (officeId === null || officeId === undefined) {
                throw new RequiredError('officeId', 'Required parameter officeId was null or undefined when calling apiQuestionnaireInstanceOfficeIdQuestionnaireIdGet.');
            }
            // verify required parameter 'questionnaireId' is not null or undefined
            if (questionnaireId === null || questionnaireId === undefined) {
                throw new RequiredError('questionnaireId', 'Required parameter questionnaireId was null or undefined when calling apiQuestionnaireInstanceOfficeIdQuestionnaireIdGet.');
            }
            const localVarPath = `/api/questionnaireInstance/{officeId}/{questionnaireId}`
                .replace(`{${"officeId"}}`, encodeURIComponent(String(officeId)))
                .replace(`{${"questionnaireId"}}`, encodeURIComponent(String(questionnaireId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Questionnaire Instance
         * @param {number} questionnaireInstanceId ID of the questionnaire-instance to recover.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireInstanceQuestionnaireInstanceIdGet(questionnaireInstanceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'questionnaireInstanceId' is not null or undefined
            if (questionnaireInstanceId === null || questionnaireInstanceId === undefined) {
                throw new RequiredError('questionnaireInstanceId', 'Required parameter questionnaireInstanceId was null or undefined when calling apiQuestionnaireInstanceQuestionnaireInstanceIdGet.');
            }
            const localVarPath = `/api/questionnaireInstance/{questionnaireInstanceId}`
                .replace(`{${"questionnaireInstanceId"}}`, encodeURIComponent(String(questionnaireInstanceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Questionnaire Instances
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {number} questionnaireId ID of the questionnaire to recover instances for.
         * @param {Array<GenericConditionRule>} [genericConditionRule] Array of conditions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireInstanceWithConditionsOfficeIdQuestionnaireIdPost(officeId: number, questionnaireId: number, genericConditionRule?: Array<GenericConditionRule>, options: any = {}): RequestArgs {
            // verify required parameter 'officeId' is not null or undefined
            if (officeId === null || officeId === undefined) {
                throw new RequiredError('officeId', 'Required parameter officeId was null or undefined when calling apiQuestionnaireInstanceWithConditionsOfficeIdQuestionnaireIdPost.');
            }
            // verify required parameter 'questionnaireId' is not null or undefined
            if (questionnaireId === null || questionnaireId === undefined) {
                throw new RequiredError('questionnaireId', 'Required parameter questionnaireId was null or undefined when calling apiQuestionnaireInstanceWithConditionsOfficeIdQuestionnaireIdPost.');
            }
            const localVarPath = `/api/questionnaireInstanceWithConditions/{officeId}/{questionnaireId}`
                .replace(`{${"officeId"}}`, encodeURIComponent(String(officeId)))
                .replace(`{${"questionnaireId"}}`, encodeURIComponent(String(questionnaireId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof genericConditionRule !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(genericConditionRule !== undefined ? genericConditionRule : {}) : (genericConditionRule || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Questionnaire
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireOfficeIdGet(officeId: number, options: any = {}): RequestArgs {
            // verify required parameter 'officeId' is not null or undefined
            if (officeId === null || officeId === undefined) {
                throw new RequiredError('officeId', 'Required parameter officeId was null or undefined when calling apiQuestionnaireOfficeIdGet.');
            }
            const localVarPath = `/api/questionnaire/{officeId}`
                .replace(`{${"officeId"}}`, encodeURIComponent(String(officeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Questionnaire-Question
         * @param {number} questionnaireId Id of the questionnaire referenced by the question configuration.
         * @param {Array<ImsQuestionnaireQuestion>} [imsQuestionnaireQuestion] Array of Questionnaire-Question configurations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireQuestionQuestionnaireIdPost(questionnaireId: number, imsQuestionnaireQuestion?: Array<ImsQuestionnaireQuestion>, options: any = {}): RequestArgs {
            // verify required parameter 'questionnaireId' is not null or undefined
            if (questionnaireId === null || questionnaireId === undefined) {
                throw new RequiredError('questionnaireId', 'Required parameter questionnaireId was null or undefined when calling apiQuestionnaireQuestionQuestionnaireIdPost.');
            }
            const localVarPath = `/api/questionnaireQuestion/{questionnaireId}`
                .replace(`{${"questionnaireId"}}`, encodeURIComponent(String(questionnaireId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof imsQuestionnaireQuestion !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(imsQuestionnaireQuestion !== undefined ? imsQuestionnaireQuestion : {}) : (imsQuestionnaireQuestion || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Tabs for the requested Questionnaire
         * @param {number} officeId ID of the current office used to filter the questionnaires.
         * @param {number} questionnaireId Questionnaire to retrieve Tabs for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireTabListOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options: any = {}): RequestArgs {
            // verify required parameter 'officeId' is not null or undefined
            if (officeId === null || officeId === undefined) {
                throw new RequiredError('officeId', 'Required parameter officeId was null or undefined when calling apiQuestionnaireTabListOfficeIdQuestionnaireIdGet.');
            }
            // verify required parameter 'questionnaireId' is not null or undefined
            if (questionnaireId === null || questionnaireId === undefined) {
                throw new RequiredError('questionnaireId', 'Required parameter questionnaireId was null or undefined when calling apiQuestionnaireTabListOfficeIdQuestionnaireIdGet.');
            }
            const localVarPath = `/api/questionnaire-tab-list/{officeId}/{questionnaireId}`
                .replace(`{${"officeId"}}`, encodeURIComponent(String(officeId)))
                .replace(`{${"questionnaireId"}}`, encodeURIComponent(String(questionnaireId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImsQuestionnaireApi - functional programming interface
 * @export
 */
export const ImsQuestionnaireApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Questionnaire
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {string} questionnaireCode Code of the questionnaire to recover.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireByCodeOfficeIdQuestionnaireCodeGet(officeId: number, questionnaireCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImsQuestionnaire> {
            const localVarAxiosArgs = ImsQuestionnaireApiAxiosParamCreator(configuration).apiQuestionnaireByCodeOfficeIdQuestionnaireCodeGet(officeId, questionnaireCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Questionnaire
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {number} questionnaireId ID of the questionnaire to recover.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireByIdOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImsQuestionnaire> {
            const localVarAxiosArgs = ImsQuestionnaireApiAxiosParamCreator(configuration).apiQuestionnaireByIdOfficeIdQuestionnaireIdGet(officeId, questionnaireId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Questionnaire Instances
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {number} questionnaireId ID of the questionnaire to recover instances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireInstanceOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsQuestionnaireInstance>> {
            const localVarAxiosArgs = ImsQuestionnaireApiAxiosParamCreator(configuration).apiQuestionnaireInstanceOfficeIdQuestionnaireIdGet(officeId, questionnaireId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Questionnaire Instance
         * @param {number} questionnaireInstanceId ID of the questionnaire-instance to recover.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireInstanceQuestionnaireInstanceIdGet(questionnaireInstanceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImsQuestionnaireInstance> {
            const localVarAxiosArgs = ImsQuestionnaireApiAxiosParamCreator(configuration).apiQuestionnaireInstanceQuestionnaireInstanceIdGet(questionnaireInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve Questionnaire Instances
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {number} questionnaireId ID of the questionnaire to recover instances for.
         * @param {Array<GenericConditionRule>} [genericConditionRule] Array of conditions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireInstanceWithConditionsOfficeIdQuestionnaireIdPost(officeId: number, questionnaireId: number, genericConditionRule?: Array<GenericConditionRule>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsQuestionnaireInstance>> {
            const localVarAxiosArgs = ImsQuestionnaireApiAxiosParamCreator(configuration).apiQuestionnaireInstanceWithConditionsOfficeIdQuestionnaireIdPost(officeId, questionnaireId, genericConditionRule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Questionnaire
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireOfficeIdGet(officeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsQuestionnaire>> {
            const localVarAxiosArgs = ImsQuestionnaireApiAxiosParamCreator(configuration).apiQuestionnaireOfficeIdGet(officeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Questionnaire-Question
         * @param {number} questionnaireId Id of the questionnaire referenced by the question configuration.
         * @param {Array<ImsQuestionnaireQuestion>} [imsQuestionnaireQuestion] Array of Questionnaire-Question configurations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireQuestionQuestionnaireIdPost(questionnaireId: number, imsQuestionnaireQuestion?: Array<ImsQuestionnaireQuestion>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ImsQuestionnaireApiAxiosParamCreator(configuration).apiQuestionnaireQuestionQuestionnaireIdPost(questionnaireId, imsQuestionnaireQuestion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Tabs for the requested Questionnaire
         * @param {number} officeId ID of the current office used to filter the questionnaires.
         * @param {number} questionnaireId Questionnaire to retrieve Tabs for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireTabListOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsQuestionnaireTab>> {
            const localVarAxiosArgs = ImsQuestionnaireApiAxiosParamCreator(configuration).apiQuestionnaireTabListOfficeIdQuestionnaireIdGet(officeId, questionnaireId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImsQuestionnaireApi - factory interface
 * @export
 */
export const ImsQuestionnaireApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get Questionnaire
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {string} questionnaireCode Code of the questionnaire to recover.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireByCodeOfficeIdQuestionnaireCodeGet(officeId: number, questionnaireCode: string, options?: any) {
            return ImsQuestionnaireApiFp(configuration).apiQuestionnaireByCodeOfficeIdQuestionnaireCodeGet(officeId, questionnaireCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get Questionnaire
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {number} questionnaireId ID of the questionnaire to recover.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireByIdOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options?: any) {
            return ImsQuestionnaireApiFp(configuration).apiQuestionnaireByIdOfficeIdQuestionnaireIdGet(officeId, questionnaireId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get Questionnaire Instances
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {number} questionnaireId ID of the questionnaire to recover instances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireInstanceOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options?: any) {
            return ImsQuestionnaireApiFp(configuration).apiQuestionnaireInstanceOfficeIdQuestionnaireIdGet(officeId, questionnaireId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get Questionnaire Instance
         * @param {number} questionnaireInstanceId ID of the questionnaire-instance to recover.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireInstanceQuestionnaireInstanceIdGet(questionnaireInstanceId: number, options?: any) {
            return ImsQuestionnaireApiFp(configuration).apiQuestionnaireInstanceQuestionnaireInstanceIdGet(questionnaireInstanceId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Retrieve Questionnaire Instances
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {number} questionnaireId ID of the questionnaire to recover instances for.
         * @param {Array<GenericConditionRule>} [genericConditionRule] Array of conditions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireInstanceWithConditionsOfficeIdQuestionnaireIdPost(officeId: number, questionnaireId: number, genericConditionRule?: Array<GenericConditionRule>, options?: any) {
            return ImsQuestionnaireApiFp(configuration).apiQuestionnaireInstanceWithConditionsOfficeIdQuestionnaireIdPost(officeId, questionnaireId, genericConditionRule, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get Questionnaire
         * @param {number} officeId ID of the current office used to filter the returned questionnaires.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireOfficeIdGet(officeId: number, options?: any) {
            return ImsQuestionnaireApiFp(configuration).apiQuestionnaireOfficeIdGet(officeId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update Questionnaire-Question
         * @param {number} questionnaireId Id of the questionnaire referenced by the question configuration.
         * @param {Array<ImsQuestionnaireQuestion>} [imsQuestionnaireQuestion] Array of Questionnaire-Question configurations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireQuestionQuestionnaireIdPost(questionnaireId: number, imsQuestionnaireQuestion?: Array<ImsQuestionnaireQuestion>, options?: any) {
            return ImsQuestionnaireApiFp(configuration).apiQuestionnaireQuestionQuestionnaireIdPost(questionnaireId, imsQuestionnaireQuestion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get Tabs for the requested Questionnaire
         * @param {number} officeId ID of the current office used to filter the questionnaires.
         * @param {number} questionnaireId Questionnaire to retrieve Tabs for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionnaireTabListOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options?: any) {
            return ImsQuestionnaireApiFp(configuration).apiQuestionnaireTabListOfficeIdQuestionnaireIdGet(officeId, questionnaireId, options)(axios, basePath);
        },
    };
};

/**
 * ImsQuestionnaireApi - object-oriented interface
 * @export
 * @class ImsQuestionnaireApi
 * @extends {BaseAPI}
 */
export class ImsQuestionnaireApi extends BaseAPI {
    /**
     * 
     * @summary Get Questionnaire
     * @param {number} officeId ID of the current office used to filter the returned questionnaires.
     * @param {string} questionnaireCode Code of the questionnaire to recover.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsQuestionnaireApi
     */
    public apiQuestionnaireByCodeOfficeIdQuestionnaireCodeGet(officeId: number, questionnaireCode: string, options?: any) {
        return ImsQuestionnaireApiFp(this.configuration).apiQuestionnaireByCodeOfficeIdQuestionnaireCodeGet(officeId, questionnaireCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get Questionnaire
     * @param {number} officeId ID of the current office used to filter the returned questionnaires.
     * @param {number} questionnaireId ID of the questionnaire to recover.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsQuestionnaireApi
     */
    public apiQuestionnaireByIdOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options?: any) {
        return ImsQuestionnaireApiFp(this.configuration).apiQuestionnaireByIdOfficeIdQuestionnaireIdGet(officeId, questionnaireId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get Questionnaire Instances
     * @param {number} officeId ID of the current office used to filter the returned questionnaires.
     * @param {number} questionnaireId ID of the questionnaire to recover instances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsQuestionnaireApi
     */
    public apiQuestionnaireInstanceOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options?: any) {
        return ImsQuestionnaireApiFp(this.configuration).apiQuestionnaireInstanceOfficeIdQuestionnaireIdGet(officeId, questionnaireId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get Questionnaire Instance
     * @param {number} questionnaireInstanceId ID of the questionnaire-instance to recover.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsQuestionnaireApi
     */
    public apiQuestionnaireInstanceQuestionnaireInstanceIdGet(questionnaireInstanceId: number, options?: any) {
        return ImsQuestionnaireApiFp(this.configuration).apiQuestionnaireInstanceQuestionnaireInstanceIdGet(questionnaireInstanceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Retrieve Questionnaire Instances
     * @param {number} officeId ID of the current office used to filter the returned questionnaires.
     * @param {number} questionnaireId ID of the questionnaire to recover instances for.
     * @param {Array<GenericConditionRule>} [genericConditionRule] Array of conditions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsQuestionnaireApi
     */
    public apiQuestionnaireInstanceWithConditionsOfficeIdQuestionnaireIdPost(officeId: number, questionnaireId: number, genericConditionRule?: Array<GenericConditionRule>, options?: any) {
        return ImsQuestionnaireApiFp(this.configuration).apiQuestionnaireInstanceWithConditionsOfficeIdQuestionnaireIdPost(officeId, questionnaireId, genericConditionRule, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get Questionnaire
     * @param {number} officeId ID of the current office used to filter the returned questionnaires.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsQuestionnaireApi
     */
    public apiQuestionnaireOfficeIdGet(officeId: number, options?: any) {
        return ImsQuestionnaireApiFp(this.configuration).apiQuestionnaireOfficeIdGet(officeId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update Questionnaire-Question
     * @param {number} questionnaireId Id of the questionnaire referenced by the question configuration.
     * @param {Array<ImsQuestionnaireQuestion>} [imsQuestionnaireQuestion] Array of Questionnaire-Question configurations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsQuestionnaireApi
     */
    public apiQuestionnaireQuestionQuestionnaireIdPost(questionnaireId: number, imsQuestionnaireQuestion?: Array<ImsQuestionnaireQuestion>, options?: any) {
        return ImsQuestionnaireApiFp(this.configuration).apiQuestionnaireQuestionQuestionnaireIdPost(questionnaireId, imsQuestionnaireQuestion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get Tabs for the requested Questionnaire
     * @param {number} officeId ID of the current office used to filter the questionnaires.
     * @param {number} questionnaireId Questionnaire to retrieve Tabs for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsQuestionnaireApi
     */
    public apiQuestionnaireTabListOfficeIdQuestionnaireIdGet(officeId: number, questionnaireId: number, options?: any) {
        return ImsQuestionnaireApiFp(this.configuration).apiQuestionnaireTabListOfficeIdQuestionnaireIdGet(officeId, questionnaireId, options)(this.axios, this.basePath);
    }

}


/**
 * ImsTemplateApi - axios parameter creator
 * @export
 */
export const ImsTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForOverviewAllIndicatorsPost(body?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/create-excel-for-overview-all-indicators`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GenericExelSelectPayload} [genericExelSelectPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForOverviewIndicatorsPost(genericExelSelectPayload?: GenericExelSelectPayload, options: any = {}): RequestArgs {
            const localVarPath = `/api/create-excel-for-overview-indicators`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof genericExelSelectPayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(genericExelSelectPayload !== undefined ? genericExelSelectPayload : {}) : (genericExelSelectPayload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },


        /**
         * 
         * @summary Generate an OpenXml Excel document based on the defined data query and column labels.
         * @param {GenericExelSelectPayload} [genericExelSelectPayload] Parameters including query information for data and column label translations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForTablePost(genericExelSelectPayload?: GenericExelSelectPayload, options: any = {}): RequestArgs {
            const localVarPath = `/api/create-excel-for-table`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof genericExelSelectPayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(genericExelSelectPayload !== undefined ? genericExelSelectPayload : {}) : (genericExelSelectPayload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate an OpenXml Excel document based on the stored procedure.
         * @param [ExcelStoredProcedurePayload] {exelSelectPayload} Parameters including procedure name and procedure parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForSPPost(excelSPPayload?: ExcelStoredProcedurePayload, options: any = {}): RequestArgs {
            const localVarPath = `/api/create-excel-SP`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof excelSPPayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(excelSPPayload !== undefined ? excelSPPayload : {}) : (excelSPPayload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },



        /**
         * 
         * @summary Generate an OpenXml Word document based on the defined text in an IMS_TEMPLATE replacing data with a specific query condition.
         * @param {number} [templateId] ID of the IMS_TEMPLATE to use for generating the document document.
         * @param {string} [queryCondition] Query string to apply to the template data query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMergedTextGet(templateId?: number, queryCondition?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/merged-text`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (templateId !== undefined) {
                localVarQueryParameter['templateId'] = templateId;
            }

            if (queryCondition !== undefined) {
                localVarQueryParameter['queryCondition'] = queryCondition;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {number} [templateId] 
         * @param {number} [templateTypeId] 
         * @param {string} [templateTypeCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateGet(officeId?: number, templateId?: number, templateTypeId?: number, templateTypeCode?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/template`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }

            if (templateId !== undefined) {
                localVarQueryParameter['templateId'] = templateId;
            }

            if (templateTypeId !== undefined) {
                localVarQueryParameter['templateTypeId'] = templateTypeId;
            }

            if (templateTypeCode !== undefined) {
                localVarQueryParameter['templateTypeCode'] = templateTypeCode;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [templateType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateParamForTypeGet(templateType?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/template-param-for-type`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (templateType !== undefined) {
                localVarQueryParameter['templateType'] = templateType;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ImsTemplateType for the provided template id.
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTypeForTemplateTemplateIdGet(templateId: number, options: any = {}): RequestArgs {
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new RequiredError('templateId', 'Required parameter templateId was null or undefined when calling apiTemplateTypeForTemplateTemplateIdGet.');
            }
            const localVarPath = `/api/template-type-for-template/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTypesGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/template-types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate an OpenXml Excel document based on the structure and results of Questionnaires.
         * @param {number} questionnaireId Id of the questionnaire to get results for.
         * @param {GenericExelSelectPayload} [genericExelSelectPayload] Excel query condition object. NOTE: Only \&quot;conditionRules\&quot; and \&quot;columnLabels\&quot; will be considered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadQuestionnaireResults(questionnaireId: number, genericExelSelectPayload?: GenericExelSelectPayload, options: any = {}): RequestArgs {
            // verify required parameter 'questionnaireId' is not null or undefined
            if (questionnaireId === null || questionnaireId === undefined) {
                throw new RequiredError('questionnaireId', 'Required parameter questionnaireId was null or undefined when calling downloadQuestionnaireResults.');
            }
            const localVarPath = `/api/create-excel-for-questionniare/{questionnaireId}`
                .replace(`{${"questionnaireId"}}`, encodeURIComponent(String(questionnaireId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof genericExelSelectPayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(genericExelSelectPayload !== undefined ? genericExelSelectPayload : {}) : (genericExelSelectPayload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImsTemplateApi - functional programming interface
 * @export
 */
export const ImsTemplateApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForOverviewAllIndicatorsPost(body?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ImsTemplateApiAxiosParamCreator(configuration).apiCreateExcelForOverviewAllIndicatorsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {GenericExelSelectPayload} [genericExelSelectPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForOverviewIndicatorsPost(genericExelSelectPayload?: GenericExelSelectPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ImsTemplateApiAxiosParamCreator(configuration).apiCreateExcelForOverviewIndicatorsPost(genericExelSelectPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Generate an OpenXml Excel document based on the defined data query and column labels.
         * @param {GenericExelSelectPayload} [genericExelSelectPayload] Parameters including query information for data and column label translations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForTablePost(genericExelSelectPayload?: GenericExelSelectPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ImsTemplateApiAxiosParamCreator(configuration).apiCreateExcelForTablePost(genericExelSelectPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Generate an OpenXml Excel document based on stored procedure.
         * @param {ExcelStoredProcedurePayload} [excelSPPayload] Parameters including stored procedure name and stored procedure parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForSPPost(excelSPPayload?: ExcelStoredProcedurePayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ImsTemplateApiAxiosParamCreator(configuration).apiCreateExcelForSPPost(excelSPPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },



        /**
         * 
         * @summary Generate an OpenXml Word document based on the defined text in an IMS_TEMPLATE replacing data with a specific query condition.
         * @param {number} [templateId] ID of the IMS_TEMPLATE to use for generating the document document.
         * @param {string} [queryCondition] Query string to apply to the template data query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMergedTextGet(templateId?: number, queryCondition?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ImsTemplateApiAxiosParamCreator(configuration).apiMergedTextGet(templateId, queryCondition, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {number} [templateId] 
         * @param {number} [templateTypeId] 
         * @param {string} [templateTypeCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateGet(officeId?: number, templateId?: number, templateTypeId?: number, templateTypeCode?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsTemplate>> {
            const localVarAxiosArgs = ImsTemplateApiAxiosParamCreator(configuration).apiTemplateGet(officeId, templateId, templateTypeId, templateTypeCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [templateType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateParamForTypeGet(templateType?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsTemplateParams>> {
            const localVarAxiosArgs = ImsTemplateApiAxiosParamCreator(configuration).apiTemplateParamForTypeGet(templateType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get ImsTemplateType for the provided template id.
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTypeForTemplateTemplateIdGet(templateId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImsTemplateType> {
            const localVarAxiosArgs = ImsTemplateApiAxiosParamCreator(configuration).apiTemplateTypeForTemplateTemplateIdGet(templateId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTypesGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsTemplateType>> {
            const localVarAxiosArgs = ImsTemplateApiAxiosParamCreator(configuration).apiTemplateTypesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Generate an OpenXml Excel document based on the structure and results of Questionnaires.
         * @param {number} questionnaireId Id of the questionnaire to get results for.
         * @param {GenericExelSelectPayload} [genericExelSelectPayload] Excel query condition object. NOTE: Only \&quot;conditionRules\&quot; and \&quot;columnLabels\&quot; will be considered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadQuestionnaireResults(questionnaireId: number, genericExelSelectPayload?: GenericExelSelectPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ImsTemplateApiAxiosParamCreator(configuration).downloadQuestionnaireResults(questionnaireId, genericExelSelectPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImsTemplateApi - factory interface
 * @export
 */
export const ImsTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForOverviewAllIndicatorsPost(body?: string, options?: any) {
            return ImsTemplateApiFp(configuration).apiCreateExcelForOverviewAllIndicatorsPost(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {GenericExelSelectPayload} [genericExelSelectPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForOverviewIndicatorsPost(genericExelSelectPayload?: GenericExelSelectPayload, options?: any) {
            return ImsTemplateApiFp(configuration).apiCreateExcelForOverviewIndicatorsPost(genericExelSelectPayload, options)(axios, basePath);
        },
        /**
         * 
         * @summary Generate an OpenXml Excel document based on the defined data query and column labels.
         * @param {GenericExelSelectPayload} [genericExelSelectPayload] Parameters including query information for data and column label translations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForTablePost(genericExelSelectPayload?: GenericExelSelectPayload, options?: any) {
            return ImsTemplateApiFp(configuration).apiCreateExcelForTablePost(genericExelSelectPayload, options)(axios, basePath);
        },
        /**
         * 
         * @summary Generate an OpenXml Excel document based on the stored procedure.
         * @param {ExcelStoredProcedurePayload} [excelSPPayload] Parameters including sp name and parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateExcelForSPPost(excelSPPayload?: ExcelStoredProcedurePayload, options?: any) {
            return ImsTemplateApiFp(configuration).apiCreateExcelForSPPost(excelSPPayload, options)(axios, basePath);
        },


        /**
         * 
         * @summary Generate an OpenXml Word document based on the defined text in an IMS_TEMPLATE replacing data with a specific query condition.
         * @param {number} [templateId] ID of the IMS_TEMPLATE to use for generating the document document.
         * @param {string} [queryCondition] Query string to apply to the template data query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMergedTextGet(templateId?: number, queryCondition?: string, options?: any) {
            return ImsTemplateApiFp(configuration).apiMergedTextGet(templateId, queryCondition, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {number} [templateId] 
         * @param {number} [templateTypeId] 
         * @param {string} [templateTypeCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateGet(officeId?: number, templateId?: number, templateTypeId?: number, templateTypeCode?: string, options?: any) {
            return ImsTemplateApiFp(configuration).apiTemplateGet(officeId, templateId, templateTypeId, templateTypeCode, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [templateType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateParamForTypeGet(templateType?: number, options?: any) {
            return ImsTemplateApiFp(configuration).apiTemplateParamForTypeGet(templateType, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get ImsTemplateType for the provided template id.
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTypeForTemplateTemplateIdGet(templateId: number, options?: any) {
            return ImsTemplateApiFp(configuration).apiTemplateTypeForTemplateTemplateIdGet(templateId, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTypesGet(options?: any) {
            return ImsTemplateApiFp(configuration).apiTemplateTypesGet(options)(axios, basePath);
        },
        /**
         * 
         * @summary Generate an OpenXml Excel document based on the structure and results of Questionnaires.
         * @param {number} questionnaireId Id of the questionnaire to get results for.
         * @param {GenericExelSelectPayload} [genericExelSelectPayload] Excel query condition object. NOTE: Only \&quot;conditionRules\&quot; and \&quot;columnLabels\&quot; will be considered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadQuestionnaireResults(questionnaireId: number, genericExelSelectPayload?: GenericExelSelectPayload, options?: any) {
            return ImsTemplateApiFp(configuration).downloadQuestionnaireResults(questionnaireId, genericExelSelectPayload, options)(axios, basePath);
        },
    };
};

/**
 * ImsTemplateApi - object-oriented interface
 * @export
 * @class ImsTemplateApi
 * @extends {BaseAPI}
 */
export class ImsTemplateApi extends BaseAPI {
    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsTemplateApi
     */
    public apiCreateExcelForOverviewAllIndicatorsPost(body?: string, options?: any) {
        return ImsTemplateApiFp(this.configuration).apiCreateExcelForOverviewAllIndicatorsPost(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {GenericExelSelectPayload} [genericExelSelectPayload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsTemplateApi
     */
    public apiCreateExcelForOverviewIndicatorsPost(genericExelSelectPayload?: GenericExelSelectPayload, options?: any) {
        return ImsTemplateApiFp(this.configuration).apiCreateExcelForOverviewIndicatorsPost(genericExelSelectPayload, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Generate an OpenXml Excel document based on the defined data query and column labels.
     * @param {GenericExelSelectPayload} [genericExelSelectPayload] Parameters including query information for data and column label translations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsTemplateApi
     */
    public apiCreateExcelForTablePost(genericExelSelectPayload?: GenericExelSelectPayload, options?: any) {
        return ImsTemplateApiFp(this.configuration).apiCreateExcelForTablePost(genericExelSelectPayload, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Generate an OpenXml Excel document based on the stored procedure.
         * @param [ExcelStoredProcedurePayload] {exelSelectPayload} Parameters including procedure name and procedure parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsTemplateApi
     */
    public apiCreateExcelForSPPost(exelSelectPayload?: ExcelStoredProcedurePayload, options?: any) {
        return ImsTemplateApiFp(this.configuration).apiCreateExcelForSPPost(exelSelectPayload, options)(this.axios, this.basePath);
    }


    /**
     * 
     * @summary Generate an OpenXml Word document based on the defined text in an IMS_TEMPLATE replacing data with a specific query condition.
     * @param {number} [templateId] ID of the IMS_TEMPLATE to use for generating the document document.
     * @param {string} [queryCondition] Query string to apply to the template data query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsTemplateApi
     */
    public apiMergedTextGet(templateId?: number, queryCondition?: string, options?: any) {
        return ImsTemplateApiFp(this.configuration).apiMergedTextGet(templateId, queryCondition, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [officeId] 
     * @param {number} [templateId] 
     * @param {number} [templateTypeId] 
     * @param {string} [templateTypeCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsTemplateApi
     */
    public apiTemplateGet(officeId?: number, templateId?: number, templateTypeId?: number, templateTypeCode?: string, options?: any) {
        return ImsTemplateApiFp(this.configuration).apiTemplateGet(officeId, templateId, templateTypeId, templateTypeCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [templateType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsTemplateApi
     */
    public apiTemplateParamForTypeGet(templateType?: number, options?: any) {
        return ImsTemplateApiFp(this.configuration).apiTemplateParamForTypeGet(templateType, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get ImsTemplateType for the provided template id.
     * @param {number} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsTemplateApi
     */
    public apiTemplateTypeForTemplateTemplateIdGet(templateId: number, options?: any) {
        return ImsTemplateApiFp(this.configuration).apiTemplateTypeForTemplateTemplateIdGet(templateId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsTemplateApi
     */
    public apiTemplateTypesGet(options?: any) {
        return ImsTemplateApiFp(this.configuration).apiTemplateTypesGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Generate an OpenXml Excel document based on the structure and results of Questionnaires.
     * @param {number} questionnaireId Id of the questionnaire to get results for.
     * @param {GenericExelSelectPayload} [genericExelSelectPayload] Excel query condition object. NOTE: Only \&quot;conditionRules\&quot; and \&quot;columnLabels\&quot; will be considered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsTemplateApi
     */
    public downloadQuestionnaireResults(questionnaireId: number, genericExelSelectPayload?: GenericExelSelectPayload, options?: any) {
        return ImsTemplateApiFp(this.configuration).downloadQuestionnaireResults(questionnaireId, genericExelSelectPayload, options)(this.axios, this.basePath);
    }

}


/**
 * ImsUsersApi - axios parameter creator
 * @export
 */
export const ImsUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/ImsUsers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersIdDelete(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiImsUsersIdDelete.');
            }
            const localVarPath = `/api/ImsUsers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersIdGet(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiImsUsersIdGet.');
            }
            const localVarPath = `/api/ImsUsers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ImsUser} [imsUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersIdPut(id: string, imsUser?: ImsUser, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiImsUsersIdPut.');
            }
            const localVarPath = `/api/ImsUsers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof imsUser !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(imsUser !== undefined ? imsUser : {}) : (imsUser || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ImsUser} [imsUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersPost(imsUser?: ImsUser, options: any = {}): RequestArgs {
            const localVarPath = `/api/ImsUsers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof imsUser !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(imsUser !== undefined ? imsUser : {}) : (imsUser || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImsUsersApi - functional programming interface
 * @export
 */
export const ImsUsersApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImsUser>> {
            const localVarAxiosArgs = ImsUsersApiAxiosParamCreator(configuration).apiImsUsersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersIdDelete(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImsUser> {
            const localVarAxiosArgs = ImsUsersApiAxiosParamCreator(configuration).apiImsUsersIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersIdGet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImsUser> {
            const localVarAxiosArgs = ImsUsersApiAxiosParamCreator(configuration).apiImsUsersIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ImsUser} [imsUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersIdPut(id: string, imsUser?: ImsUser, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ImsUsersApiAxiosParamCreator(configuration).apiImsUsersIdPut(id, imsUser, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ImsUser} [imsUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersPost(imsUser?: ImsUser, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImsUser> {
            const localVarAxiosArgs = ImsUsersApiAxiosParamCreator(configuration).apiImsUsersPost(imsUser, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImsUsersApi - factory interface
 * @export
 */
export const ImsUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersGet(options?: any) {
            return ImsUsersApiFp(configuration).apiImsUsersGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersIdDelete(id: string, options?: any) {
            return ImsUsersApiFp(configuration).apiImsUsersIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersIdGet(id: string, options?: any) {
            return ImsUsersApiFp(configuration).apiImsUsersIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {ImsUser} [imsUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersIdPut(id: string, imsUser?: ImsUser, options?: any) {
            return ImsUsersApiFp(configuration).apiImsUsersIdPut(id, imsUser, options)(axios, basePath);
        },
        /**
         * 
         * @param {ImsUser} [imsUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImsUsersPost(imsUser?: ImsUser, options?: any) {
            return ImsUsersApiFp(configuration).apiImsUsersPost(imsUser, options)(axios, basePath);
        },
    };
};

/**
 * ImsUsersApi - object-oriented interface
 * @export
 * @class ImsUsersApi
 * @extends {BaseAPI}
 */
export class ImsUsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsUsersApi
     */
    public apiImsUsersGet(options?: any) {
        return ImsUsersApiFp(this.configuration).apiImsUsersGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsUsersApi
     */
    public apiImsUsersIdDelete(id: string, options?: any) {
        return ImsUsersApiFp(this.configuration).apiImsUsersIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsUsersApi
     */
    public apiImsUsersIdGet(id: string, options?: any) {
        return ImsUsersApiFp(this.configuration).apiImsUsersIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {ImsUser} [imsUser] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsUsersApi
     */
    public apiImsUsersIdPut(id: string, imsUser?: ImsUser, options?: any) {
        return ImsUsersApiFp(this.configuration).apiImsUsersIdPut(id, imsUser, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ImsUser} [imsUser] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImsUsersApi
     */
    public apiImsUsersPost(imsUser?: ImsUser, options?: any) {
        return ImsUsersApiFp(this.configuration).apiImsUsersPost(imsUser, options)(this.axios, this.basePath);
    }

}


/**
 * MenusApi - axios parameter creator
 * @export
 */
export const MenusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenusGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/Menus`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenusUserGuidGet(userGuid: string, options: any = {}): RequestArgs {
            // verify required parameter 'userGuid' is not null or undefined
            if (userGuid === null || userGuid === undefined) {
                throw new RequiredError('userGuid', 'Required parameter userGuid was null or undefined when calling apiMenusUserGuidGet.');
            }
            const localVarPath = `/api/Menus/{userGuid}`
                .replace(`{${"userGuid"}}`, encodeURIComponent(String(userGuid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenusApi - functional programming interface
 * @export
 */
export const MenusApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenusGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Menu>> {
            const localVarAxiosArgs = MenusApiAxiosParamCreator(configuration).apiMenusGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenusUserGuidGet(userGuid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Menu>> {
            const localVarAxiosArgs = MenusApiAxiosParamCreator(configuration).apiMenusUserGuidGet(userGuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MenusApi - factory interface
 * @export
 */
export const MenusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenusGet(options?: any) {
            return MenusApiFp(configuration).apiMenusGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} userGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMenusUserGuidGet(userGuid: string, options?: any) {
            return MenusApiFp(configuration).apiMenusUserGuidGet(userGuid, options)(axios, basePath);
        },
    };
};

/**
 * MenusApi - object-oriented interface
 * @export
 * @class MenusApi
 * @extends {BaseAPI}
 */
export class MenusApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public apiMenusGet(options?: any) {
        return MenusApiFp(this.configuration).apiMenusGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} userGuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public apiMenusUserGuidGet(userGuid: string, options?: any) {
        return MenusApiFp(this.configuration).apiMenusUserGuidGet(userGuid, options)(this.axios, this.basePath);
    }

}


/**
 * NavBudgetEntryApi - axios parameter creator
 * @export
 */
export const NavBudgetEntryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavBudgetEntryGet(company?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/NavBudgetEntry`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (company !== undefined) {
                localVarQueryParameter['Company'] = company;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NavBudgetEntryApi - functional programming interface
 * @export
 */
export const NavBudgetEntryApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavBudgetEntryGet(company?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsClassBE> {
            const localVarAxiosArgs = NavBudgetEntryApiAxiosParamCreator(configuration).apiNavBudgetEntryGet(company, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NavBudgetEntryApi - factory interface
 * @export
 */
export const NavBudgetEntryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavBudgetEntryGet(company?: string, options?: any) {
            return NavBudgetEntryApiFp(configuration).apiNavBudgetEntryGet(company, options)(axios, basePath);
        },
    };
};

/**
 * NavBudgetEntryApi - object-oriented interface
 * @export
 * @class NavBudgetEntryApi
 * @extends {BaseAPI}
 */
export class NavBudgetEntryApi extends BaseAPI {
    /**
     * 
     * @param {string} [company] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavBudgetEntryApi
     */
    public apiNavBudgetEntryGet(company?: string, options?: any) {
        return NavBudgetEntryApiFp(this.configuration).apiNavBudgetEntryGet(company, options)(this.axios, this.basePath);
    }

}


/**
 * NavCompanyListApi - axios parameter creator
 * @export
 */
export const NavCompanyListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavCompanyListGet(company?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/NavCompanyList`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (company !== undefined) {
                localVarQueryParameter['Company'] = company;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NavCompanyListApi - functional programming interface
 * @export
 */
export const NavCompanyListApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavCompanyListGet(company?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsClassCL> {
            const localVarAxiosArgs = NavCompanyListApiAxiosParamCreator(configuration).apiNavCompanyListGet(company, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NavCompanyListApi - factory interface
 * @export
 */
export const NavCompanyListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavCompanyListGet(company?: string, options?: any) {
            return NavCompanyListApiFp(configuration).apiNavCompanyListGet(company, options)(axios, basePath);
        },
    };
};

/**
 * NavCompanyListApi - object-oriented interface
 * @export
 * @class NavCompanyListApi
 * @extends {BaseAPI}
 */
export class NavCompanyListApi extends BaseAPI {
    /**
     * 
     * @param {string} [company] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavCompanyListApi
     */
    public apiNavCompanyListGet(company?: string, options?: any) {
        return NavCompanyListApiFp(this.configuration).apiNavCompanyListGet(company, options)(this.axios, this.basePath);
    }

}


/**
 * NavDimensionApi - axios parameter creator
 * @export
 */
export const NavDimensionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavDimensionGet(company?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/NavDimension`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (company !== undefined) {
                localVarQueryParameter['Company'] = company;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NavDimensionApi - functional programming interface
 * @export
 */
export const NavDimensionApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavDimensionGet(company?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsClassDim> {
            const localVarAxiosArgs = NavDimensionApiAxiosParamCreator(configuration).apiNavDimensionGet(company, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NavDimensionApi - factory interface
 * @export
 */
export const NavDimensionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavDimensionGet(company?: string, options?: any) {
            return NavDimensionApiFp(configuration).apiNavDimensionGet(company, options)(axios, basePath);
        },
    };
};

/**
 * NavDimensionApi - object-oriented interface
 * @export
 * @class NavDimensionApi
 * @extends {BaseAPI}
 */
export class NavDimensionApi extends BaseAPI {
    /**
     * 
     * @param {string} [company] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavDimensionApi
     */
    public apiNavDimensionGet(company?: string, options?: any) {
        return NavDimensionApiFp(this.configuration).apiNavDimensionGet(company, options)(this.axios, this.basePath);
    }

}


/**
 * NavGLSApi - axios parameter creator
 * @export
 */
export const NavGLSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavGLSGet(company?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/NavGLS`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (company !== undefined) {
                localVarQueryParameter['Company'] = company;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NavGLSApi - functional programming interface
 * @export
 */
export const NavGLSApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavGLSGet(company?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsClassGLS> {
            const localVarAxiosArgs = NavGLSApiAxiosParamCreator(configuration).apiNavGLSGet(company, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NavGLSApi - factory interface
 * @export
 */
export const NavGLSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavGLSGet(company?: string, options?: any) {
            return NavGLSApiFp(configuration).apiNavGLSGet(company, options)(axios, basePath);
        },
    };
};

/**
 * NavGLSApi - object-oriented interface
 * @export
 * @class NavGLSApi
 * @extends {BaseAPI}
 */
export class NavGLSApi extends BaseAPI {
    /**
     * 
     * @param {string} [company] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavGLSApi
     */
    public apiNavGLSGet(company?: string, options?: any) {
        return NavGLSApiFp(this.configuration).apiNavGLSGet(company, options)(this.axios, this.basePath);
    }

}


/**
 * NavImsApi - axios parameter creator
 * @export
 */
export const NavImsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavImsApiNavDefaultFromCompanyGet(company?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/NavIms/api/navDefaultFromCompany`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavImsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/NavIms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NavImsApi - functional programming interface
 * @export
 */
export const NavImsApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavImsApiNavDefaultFromCompanyGet(company?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsLedger> {
            const localVarAxiosArgs = NavImsApiAxiosParamCreator(configuration).apiNavImsApiNavDefaultFromCompanyGet(company, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavImsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JRSCoa>> {
            const localVarAxiosArgs = NavImsApiAxiosParamCreator(configuration).apiNavImsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NavImsApi - factory interface
 * @export
 */
export const NavImsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavImsApiNavDefaultFromCompanyGet(company?: string, options?: any) {
            return NavImsApiFp(configuration).apiNavImsApiNavDefaultFromCompanyGet(company, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavImsGet(options?: any) {
            return NavImsApiFp(configuration).apiNavImsGet(options)(axios, basePath);
        },
    };
};

/**
 * NavImsApi - object-oriented interface
 * @export
 * @class NavImsApi
 * @extends {BaseAPI}
 */
export class NavImsApi extends BaseAPI {
    /**
     * 
     * @param {string} [company] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavImsApi
     */
    public apiNavImsApiNavDefaultFromCompanyGet(company?: string, options?: any) {
        return NavImsApiFp(this.configuration).apiNavImsApiNavDefaultFromCompanyGet(company, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavImsApi
     */
    public apiNavImsGet(options?: any) {
        return NavImsApiFp(this.configuration).apiNavImsGet(options)(this.axios, this.basePath);
    }

}


/**
 * NavIntegrationApi - axios parameter creator
 * @export
 */
export const NavIntegrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavDimensionsGetGet(id?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/navDimensionsGet`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NavDimension1} [navDimension1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavDimensionsPost(navDimension1?: NavDimension1, options: any = {}): RequestArgs {
            const localVarPath = `/api/navDimensions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof navDimension1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(navDimension1 !== undefined ? navDimension1 : {}) : (navDimension1 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NavBudget1} [navBudget1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavGLBudgetPutGet(navBudget1?: NavBudget1, options: any = {}): RequestArgs {
            const localVarPath = `/api/navGLBudgetPut`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof navBudget1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(navBudget1 !== undefined ? navBudget1 : {}) : (navBudget1 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NavPayload} [navPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavGLBulkBudgetPost(navPayload?: NavPayload, options: any = {}): RequestArgs {
            const localVarPath = `/api/navGLBulkBudget`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof navPayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(navPayload !== undefined ? navPayload : {}) : (navPayload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NavIntegrationApi - functional programming interface
 * @export
 */
export const NavIntegrationApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavDimensionsGetGet(id?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NavIntegrationApiAxiosParamCreator(configuration).apiNavDimensionsGetGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NavDimension1} [navDimension1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavDimensionsPost(navDimension1?: NavDimension1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NavIntegrationApiAxiosParamCreator(configuration).apiNavDimensionsPost(navDimension1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NavBudget1} [navBudget1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavGLBudgetPutGet(navBudget1?: NavBudget1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NavIntegrationApiAxiosParamCreator(configuration).apiNavGLBudgetPutGet(navBudget1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NavPayload} [navPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavGLBulkBudgetPost(navPayload?: NavPayload, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NavIntegrationApiAxiosParamCreator(configuration).apiNavGLBulkBudgetPost(navPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NavIntegrationApi - factory interface
 * @export
 */
export const NavIntegrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavDimensionsGetGet(id?: number, options?: any) {
            return NavIntegrationApiFp(configuration).apiNavDimensionsGetGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {NavDimension1} [navDimension1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavDimensionsPost(navDimension1?: NavDimension1, options?: any) {
            return NavIntegrationApiFp(configuration).apiNavDimensionsPost(navDimension1, options)(axios, basePath);
        },
        /**
         * 
         * @param {NavBudget1} [navBudget1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavGLBudgetPutGet(navBudget1?: NavBudget1, options?: any) {
            return NavIntegrationApiFp(configuration).apiNavGLBudgetPutGet(navBudget1, options)(axios, basePath);
        },
        /**
         * 
         * @param {NavPayload} [navPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNavGLBulkBudgetPost(navPayload?: NavPayload, options?: any) {
            return NavIntegrationApiFp(configuration).apiNavGLBulkBudgetPost(navPayload, options)(axios, basePath);
        },
    };
};

/**
 * NavIntegrationApi - object-oriented interface
 * @export
 * @class NavIntegrationApi
 * @extends {BaseAPI}
 */
export class NavIntegrationApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavIntegrationApi
     */
    public apiNavDimensionsGetGet(id?: number, options?: any) {
        return NavIntegrationApiFp(this.configuration).apiNavDimensionsGetGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NavDimension1} [navDimension1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavIntegrationApi
     */
    public apiNavDimensionsPost(navDimension1?: NavDimension1, options?: any) {
        return NavIntegrationApiFp(this.configuration).apiNavDimensionsPost(navDimension1, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NavBudget1} [navBudget1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavIntegrationApi
     */
    public apiNavGLBudgetPutGet(navBudget1?: NavBudget1, options?: any) {
        return NavIntegrationApiFp(this.configuration).apiNavGLBudgetPutGet(navBudget1, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NavPayload} [navPayload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NavIntegrationApi
     */
    public apiNavGLBulkBudgetPost(navPayload?: NavPayload, options?: any) {
        return NavIntegrationApiFp(this.configuration).apiNavGLBulkBudgetPost(navPayload, options)(this.axios, this.basePath);
    }

}


/**
 * PmsAnnualPlanApi - axios parameter creator
 * @export
 */
export const PmsAnnualPlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsAnnualPlanGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/PmsAnnualPlan`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PmsAnnualPlan} [pmsAnnualPlan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsAnnualPlanIdPost(id: number, pmsAnnualPlan?: PmsAnnualPlan, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiPmsAnnualPlanIdPost.');
            }
            const localVarPath = `/api/PmsAnnualPlan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof pmsAnnualPlan !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(pmsAnnualPlan !== undefined ? pmsAnnualPlan : {}) : (pmsAnnualPlan || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PmsAnnualPlanApi - functional programming interface
 * @export
 */
export const PmsAnnualPlanApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsAnnualPlanGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PmsAnnualPlan>> {
            const localVarAxiosArgs = PmsAnnualPlanApiAxiosParamCreator(configuration).apiPmsAnnualPlanGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PmsAnnualPlan} [pmsAnnualPlan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsAnnualPlanIdPost(id: number, pmsAnnualPlan?: PmsAnnualPlan, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = PmsAnnualPlanApiAxiosParamCreator(configuration).apiPmsAnnualPlanIdPost(id, pmsAnnualPlan, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PmsAnnualPlanApi - factory interface
 * @export
 */
export const PmsAnnualPlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsAnnualPlanGet(options?: any) {
            return PmsAnnualPlanApiFp(configuration).apiPmsAnnualPlanGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PmsAnnualPlan} [pmsAnnualPlan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsAnnualPlanIdPost(id: number, pmsAnnualPlan?: PmsAnnualPlan, options?: any) {
            return PmsAnnualPlanApiFp(configuration).apiPmsAnnualPlanIdPost(id, pmsAnnualPlan, options)(axios, basePath);
        },
    };
};

/**
 * PmsAnnualPlanApi - object-oriented interface
 * @export
 * @class PmsAnnualPlanApi
 * @extends {BaseAPI}
 */
export class PmsAnnualPlanApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsAnnualPlanApi
     */
    public apiPmsAnnualPlanGet(options?: any) {
        return PmsAnnualPlanApiFp(this.configuration).apiPmsAnnualPlanGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {PmsAnnualPlan} [pmsAnnualPlan] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsAnnualPlanApi
     */
    public apiPmsAnnualPlanIdPost(id: number, pmsAnnualPlan?: PmsAnnualPlan, options?: any) {
        return PmsAnnualPlanApiFp(this.configuration).apiPmsAnnualPlanIdPost(id, pmsAnnualPlan, options)(this.axios, this.basePath);
    }

}


/**
 * PmsCategoryOfInterventionApi - axios parameter creator
 * @export
 */
export const PmsCategoryOfInterventionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/PmsCategoryOfIntervention`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiPmsCategoryOfInterventionIdDelete.');
            }
            const localVarPath = `/api/PmsCategoryOfIntervention/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiPmsCategoryOfInterventionIdGet.');
            }
            const localVarPath = `/api/PmsCategoryOfIntervention/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PmsCategoryOfIntervention} [pmsCategoryOfIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionIdPut(id: number, pmsCategoryOfIntervention?: PmsCategoryOfIntervention, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiPmsCategoryOfInterventionIdPut.');
            }
            const localVarPath = `/api/PmsCategoryOfIntervention/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof pmsCategoryOfIntervention !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(pmsCategoryOfIntervention !== undefined ? pmsCategoryOfIntervention : {}) : (pmsCategoryOfIntervention || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PmsCategoryOfIntervention} [pmsCategoryOfIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionPost(pmsCategoryOfIntervention?: PmsCategoryOfIntervention, options: any = {}): RequestArgs {
            const localVarPath = `/api/PmsCategoryOfIntervention`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof pmsCategoryOfIntervention !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(pmsCategoryOfIntervention !== undefined ? pmsCategoryOfIntervention : {}) : (pmsCategoryOfIntervention || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PmsCategoryOfInterventionApi - functional programming interface
 * @export
 */
export const PmsCategoryOfInterventionApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PmsCategoryOfIntervention>> {
            const localVarAxiosArgs = PmsCategoryOfInterventionApiAxiosParamCreator(configuration).apiPmsCategoryOfInterventionGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmsCategoryOfIntervention> {
            const localVarAxiosArgs = PmsCategoryOfInterventionApiAxiosParamCreator(configuration).apiPmsCategoryOfInterventionIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmsCategoryOfIntervention> {
            const localVarAxiosArgs = PmsCategoryOfInterventionApiAxiosParamCreator(configuration).apiPmsCategoryOfInterventionIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PmsCategoryOfIntervention} [pmsCategoryOfIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionIdPut(id: number, pmsCategoryOfIntervention?: PmsCategoryOfIntervention, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PmsCategoryOfInterventionApiAxiosParamCreator(configuration).apiPmsCategoryOfInterventionIdPut(id, pmsCategoryOfIntervention, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {PmsCategoryOfIntervention} [pmsCategoryOfIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionPost(pmsCategoryOfIntervention?: PmsCategoryOfIntervention, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmsCategoryOfIntervention> {
            const localVarAxiosArgs = PmsCategoryOfInterventionApiAxiosParamCreator(configuration).apiPmsCategoryOfInterventionPost(pmsCategoryOfIntervention, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PmsCategoryOfInterventionApi - factory interface
 * @export
 */
export const PmsCategoryOfInterventionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionGet(options?: any) {
            return PmsCategoryOfInterventionApiFp(configuration).apiPmsCategoryOfInterventionGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionIdDelete(id: number, options?: any) {
            return PmsCategoryOfInterventionApiFp(configuration).apiPmsCategoryOfInterventionIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionIdGet(id: number, options?: any) {
            return PmsCategoryOfInterventionApiFp(configuration).apiPmsCategoryOfInterventionIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PmsCategoryOfIntervention} [pmsCategoryOfIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionIdPut(id: number, pmsCategoryOfIntervention?: PmsCategoryOfIntervention, options?: any) {
            return PmsCategoryOfInterventionApiFp(configuration).apiPmsCategoryOfInterventionIdPut(id, pmsCategoryOfIntervention, options)(axios, basePath);
        },
        /**
         * 
         * @param {PmsCategoryOfIntervention} [pmsCategoryOfIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsCategoryOfInterventionPost(pmsCategoryOfIntervention?: PmsCategoryOfIntervention, options?: any) {
            return PmsCategoryOfInterventionApiFp(configuration).apiPmsCategoryOfInterventionPost(pmsCategoryOfIntervention, options)(axios, basePath);
        },
    };
};

/**
 * PmsCategoryOfInterventionApi - object-oriented interface
 * @export
 * @class PmsCategoryOfInterventionApi
 * @extends {BaseAPI}
 */
export class PmsCategoryOfInterventionApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsCategoryOfInterventionApi
     */
    public apiPmsCategoryOfInterventionGet(options?: any) {
        return PmsCategoryOfInterventionApiFp(this.configuration).apiPmsCategoryOfInterventionGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsCategoryOfInterventionApi
     */
    public apiPmsCategoryOfInterventionIdDelete(id: number, options?: any) {
        return PmsCategoryOfInterventionApiFp(this.configuration).apiPmsCategoryOfInterventionIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsCategoryOfInterventionApi
     */
    public apiPmsCategoryOfInterventionIdGet(id: number, options?: any) {
        return PmsCategoryOfInterventionApiFp(this.configuration).apiPmsCategoryOfInterventionIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {PmsCategoryOfIntervention} [pmsCategoryOfIntervention] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsCategoryOfInterventionApi
     */
    public apiPmsCategoryOfInterventionIdPut(id: number, pmsCategoryOfIntervention?: PmsCategoryOfIntervention, options?: any) {
        return PmsCategoryOfInterventionApiFp(this.configuration).apiPmsCategoryOfInterventionIdPut(id, pmsCategoryOfIntervention, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {PmsCategoryOfIntervention} [pmsCategoryOfIntervention] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsCategoryOfInterventionApi
     */
    public apiPmsCategoryOfInterventionPost(pmsCategoryOfIntervention?: PmsCategoryOfIntervention, options?: any) {
        return PmsCategoryOfInterventionApiFp(this.configuration).apiPmsCategoryOfInterventionPost(pmsCategoryOfIntervention, options)(this.axios, this.basePath);
    }

}


/**
 * PmsProjectApi - axios parameter creator
 * @export
 */
export const PmsProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [actualStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsProjectGet(actualStatus?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/PmsProject`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (actualStatus !== undefined) {
                localVarQueryParameter['actualStatus'] = actualStatus;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PmsProjectApi - functional programming interface
 * @export
 */
export const PmsProjectApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [actualStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsProjectGet(actualStatus?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmsProjectWorkFlow> {
            const localVarAxiosArgs = PmsProjectApiAxiosParamCreator(configuration).apiPmsProjectGet(actualStatus, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PmsProjectApi - factory interface
 * @export
 */
export const PmsProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [actualStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsProjectGet(actualStatus?: number, options?: any) {
            return PmsProjectApiFp(configuration).apiPmsProjectGet(actualStatus, options)(axios, basePath);
        },
    };
};

/**
 * PmsProjectApi - object-oriented interface
 * @export
 * @class PmsProjectApi
 * @extends {BaseAPI}
 */
export class PmsProjectApi extends BaseAPI {
    /**
     * 
     * @param {number} [actualStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsProjectApi
     */
    public apiPmsProjectGet(actualStatus?: number, options?: any) {
        return PmsProjectApiFp(this.configuration).apiPmsProjectGet(actualStatus, options)(this.axios, this.basePath);
    }

}


/**
 * PmsTypeOfServiceApi - axios parameter creator
 * @export
 */
export const PmsTypeOfServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/PmsTypeOfService`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiPmsTypeOfServiceIdDelete.');
            }
            const localVarPath = `/api/PmsTypeOfService/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiPmsTypeOfServiceIdGet.');
            }
            const localVarPath = `/api/PmsTypeOfService/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PmsTypeOfService} [pmsTypeOfService] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceIdPut(id: number, pmsTypeOfService?: PmsTypeOfService, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiPmsTypeOfServiceIdPut.');
            }
            const localVarPath = `/api/PmsTypeOfService/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof pmsTypeOfService !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(pmsTypeOfService !== undefined ? pmsTypeOfService : {}) : (pmsTypeOfService || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PmsTypeOfService} [pmsTypeOfService] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServicePost(pmsTypeOfService?: PmsTypeOfService, options: any = {}): RequestArgs {
            const localVarPath = `/api/PmsTypeOfService`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof pmsTypeOfService !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(pmsTypeOfService !== undefined ? pmsTypeOfService : {}) : (pmsTypeOfService || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PmsTypeOfServiceApi - functional programming interface
 * @export
 */
export const PmsTypeOfServiceApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PmsTypeOfService>> {
            const localVarAxiosArgs = PmsTypeOfServiceApiAxiosParamCreator(configuration).apiPmsTypeOfServiceGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmsTypeOfService> {
            const localVarAxiosArgs = PmsTypeOfServiceApiAxiosParamCreator(configuration).apiPmsTypeOfServiceIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmsTypeOfService> {
            const localVarAxiosArgs = PmsTypeOfServiceApiAxiosParamCreator(configuration).apiPmsTypeOfServiceIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PmsTypeOfService} [pmsTypeOfService] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceIdPut(id: number, pmsTypeOfService?: PmsTypeOfService, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PmsTypeOfServiceApiAxiosParamCreator(configuration).apiPmsTypeOfServiceIdPut(id, pmsTypeOfService, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {PmsTypeOfService} [pmsTypeOfService] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServicePost(pmsTypeOfService?: PmsTypeOfService, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmsTypeOfService> {
            const localVarAxiosArgs = PmsTypeOfServiceApiAxiosParamCreator(configuration).apiPmsTypeOfServicePost(pmsTypeOfService, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PmsTypeOfServiceApi - factory interface
 * @export
 */
export const PmsTypeOfServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceGet(options?: any) {
            return PmsTypeOfServiceApiFp(configuration).apiPmsTypeOfServiceGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceIdDelete(id: number, options?: any) {
            return PmsTypeOfServiceApiFp(configuration).apiPmsTypeOfServiceIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceIdGet(id: number, options?: any) {
            return PmsTypeOfServiceApiFp(configuration).apiPmsTypeOfServiceIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PmsTypeOfService} [pmsTypeOfService] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServiceIdPut(id: number, pmsTypeOfService?: PmsTypeOfService, options?: any) {
            return PmsTypeOfServiceApiFp(configuration).apiPmsTypeOfServiceIdPut(id, pmsTypeOfService, options)(axios, basePath);
        },
        /**
         * 
         * @param {PmsTypeOfService} [pmsTypeOfService] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPmsTypeOfServicePost(pmsTypeOfService?: PmsTypeOfService, options?: any) {
            return PmsTypeOfServiceApiFp(configuration).apiPmsTypeOfServicePost(pmsTypeOfService, options)(axios, basePath);
        },
    };
};

/**
 * PmsTypeOfServiceApi - object-oriented interface
 * @export
 * @class PmsTypeOfServiceApi
 * @extends {BaseAPI}
 */
export class PmsTypeOfServiceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsTypeOfServiceApi
     */
    public apiPmsTypeOfServiceGet(options?: any) {
        return PmsTypeOfServiceApiFp(this.configuration).apiPmsTypeOfServiceGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsTypeOfServiceApi
     */
    public apiPmsTypeOfServiceIdDelete(id: number, options?: any) {
        return PmsTypeOfServiceApiFp(this.configuration).apiPmsTypeOfServiceIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsTypeOfServiceApi
     */
    public apiPmsTypeOfServiceIdGet(id: number, options?: any) {
        return PmsTypeOfServiceApiFp(this.configuration).apiPmsTypeOfServiceIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {PmsTypeOfService} [pmsTypeOfService] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsTypeOfServiceApi
     */
    public apiPmsTypeOfServiceIdPut(id: number, pmsTypeOfService?: PmsTypeOfService, options?: any) {
        return PmsTypeOfServiceApiFp(this.configuration).apiPmsTypeOfServiceIdPut(id, pmsTypeOfService, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {PmsTypeOfService} [pmsTypeOfService] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PmsTypeOfServiceApi
     */
    public apiPmsTypeOfServicePost(pmsTypeOfService?: PmsTypeOfService, options?: any) {
        return PmsTypeOfServiceApiFp(this.configuration).apiPmsTypeOfServicePost(pmsTypeOfService, options)(this.axios, this.basePath);
    }

}


/**
 * SPApi - axios parameter creator
 * @export
 */
export const SPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/SP`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiSPIdDelete.');
            }
            const localVarPath = `/api/SP/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPIdPut(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiSPIdPut.');
            }
            const localVarPath = `/api/SP/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPPost(body?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/SP`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling get.');
            }
            const localVarPath = `/api/SP/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SPApi - functional programming interface
 * @export
 */
export const SPApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = SPApiAxiosParamCreator(configuration).apiSPGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SPApiAxiosParamCreator(configuration).apiSPIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPIdPut(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SPApiAxiosParamCreator(configuration).apiSPIdPut(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPPost(body?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SPApiAxiosParamCreator(configuration).apiSPPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = SPApiAxiosParamCreator(configuration).get(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SPApi - factory interface
 * @export
 */
export const SPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPGet(options?: any) {
            return SPApiFp(configuration).apiSPGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPIdDelete(id: number, options?: any) {
            return SPApiFp(configuration).apiSPIdDelete(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPIdPut(id: number, options?: any) {
            return SPApiFp(configuration).apiSPIdPut(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSPPost(body?: string, options?: any) {
            return SPApiFp(configuration).apiSPPost(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: number, options?: any) {
            return SPApiFp(configuration).get(id, options)(axios, basePath);
        },
    };
};

/**
 * SPApi - object-oriented interface
 * @export
 * @class SPApi
 * @extends {BaseAPI}
 */
export class SPApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPApi
     */
    public apiSPGet(options?: any) {
        return SPApiFp(this.configuration).apiSPGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPApi
     */
    public apiSPIdDelete(id: number, options?: any) {
        return SPApiFp(this.configuration).apiSPIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPApi
     */
    public apiSPIdPut(id: number, options?: any) {
        return SPApiFp(this.configuration).apiSPIdPut(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPApi
     */
    public apiSPPost(body?: string, options?: any) {
        return SPApiFp(this.configuration).apiSPPost(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPApi
     */
    public get(id: number, options?: any) {
        return SPApiFp(this.configuration).get(id, options)(this.axios, this.basePath);
    }

}


/**
 * SfipPlanApi - axios parameter creator
 * @export
 */
export const SfipPlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSfipIndicatorsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/sfip/indicators`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipActivitySchedule(activityId: number, options: any = {}): RequestArgs {
            // verify required parameter 'activityId' is not null or undefined
            if (activityId === null || activityId === undefined) {
                throw new RequiredError('activityId', 'Required parameter activityId was null or undefined when calling getSfipActivitySchedule.');
            }
            const localVarPath = `/api/sfip/activity/{activityId}/schedule`
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipIndicatorOffices(options: any = {}): RequestArgs {
            const localVarPath = `/api/sfip/indicator-offices`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipPlan(officeId?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/sfip/plan`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Plan Tree starting from Priority Set to Indicator.
         * @param {number} planId 
         * @param {number} officeId 
         * @param {boolean} [includeActivities] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipPlanTree(planId: number, officeId: number, includeActivities?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'planId' is not null or undefined
            if (planId === null || planId === undefined) {
                throw new RequiredError('planId', 'Required parameter planId was null or undefined when calling getSfipPlanTree.');
            }
            // verify required parameter 'officeId' is not null or undefined
            if (officeId === null || officeId === undefined) {
                throw new RequiredError('officeId', 'Required parameter officeId was null or undefined when calling getSfipPlanTree.');
            }
            const localVarPath = `/api/sfip/plan-tree/{planId}/{officeId}`
                .replace(`{${"planId"}}`, encodeURIComponent(String(planId)))
                .replace(`{${"officeId"}}`, encodeURIComponent(String(officeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (includeActivities !== undefined) {
                localVarQueryParameter['includeActivities'] = includeActivities;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} activityId 
         * @param {Array<SfipActivitySchedule>} [sfipActivitySchedule] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSfipActivityScheduleList(activityId: number, sfipActivitySchedule?: Array<SfipActivitySchedule>, options: any = {}): RequestArgs {
            // verify required parameter 'activityId' is not null or undefined
            if (activityId === null || activityId === undefined) {
                throw new RequiredError('activityId', 'Required parameter activityId was null or undefined when calling putSfipActivityScheduleList.');
            }
            const localVarPath = `/api/sfip/activity/{activityId}/schedule-list`
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof sfipActivitySchedule !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(sfipActivitySchedule !== undefined ? sfipActivitySchedule : {}) : (sfipActivitySchedule || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SfipPlanApi - functional programming interface
 * @export
 */
export const SfipPlanApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSfipIndicatorsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SfipIndicator>> {
            const localVarAxiosArgs = SfipPlanApiAxiosParamCreator(configuration).apiSfipIndicatorsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipActivitySchedule(activityId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SfipActivitySchedule>> {
            const localVarAxiosArgs = SfipPlanApiAxiosParamCreator(configuration).getSfipActivitySchedule(activityId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipIndicatorOffices(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SfipIndicatorOffice>> {
            const localVarAxiosArgs = SfipPlanApiAxiosParamCreator(configuration).getSfipIndicatorOffices(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipPlan(officeId?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SfipPlan>> {
            const localVarAxiosArgs = SfipPlanApiAxiosParamCreator(configuration).getSfipPlan(officeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Plan Tree starting from Priority Set to Indicator.
         * @param {number} planId 
         * @param {number} officeId 
         * @param {boolean} [includeActivities] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipPlanTree(planId: number, officeId: number, includeActivities?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SfipPrioritySet>> {
            const localVarAxiosArgs = SfipPlanApiAxiosParamCreator(configuration).getSfipPlanTree(planId, officeId, includeActivities, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} activityId 
         * @param {Array<SfipActivitySchedule>} [sfipActivitySchedule] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSfipActivityScheduleList(activityId: number, sfipActivitySchedule?: Array<SfipActivitySchedule>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SfipPlanApiAxiosParamCreator(configuration).putSfipActivityScheduleList(activityId, sfipActivitySchedule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SfipPlanApi - factory interface
 * @export
 */
export const SfipPlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSfipIndicatorsGet(options?: any) {
            return SfipPlanApiFp(configuration).apiSfipIndicatorsGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipActivitySchedule(activityId: number, options?: any) {
            return SfipPlanApiFp(configuration).getSfipActivitySchedule(activityId, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipIndicatorOffices(options?: any) {
            return SfipPlanApiFp(configuration).getSfipIndicatorOffices(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipPlan(officeId?: number, options?: any) {
            return SfipPlanApiFp(configuration).getSfipPlan(officeId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get Plan Tree starting from Priority Set to Indicator.
         * @param {number} planId 
         * @param {number} officeId 
         * @param {boolean} [includeActivities] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSfipPlanTree(planId: number, officeId: number, includeActivities?: boolean, options?: any) {
            return SfipPlanApiFp(configuration).getSfipPlanTree(planId, officeId, includeActivities, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} activityId 
         * @param {Array<SfipActivitySchedule>} [sfipActivitySchedule] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSfipActivityScheduleList(activityId: number, sfipActivitySchedule?: Array<SfipActivitySchedule>, options?: any) {
            return SfipPlanApiFp(configuration).putSfipActivityScheduleList(activityId, sfipActivitySchedule, options)(axios, basePath);
        },
    };
};

/**
 * SfipPlanApi - object-oriented interface
 * @export
 * @class SfipPlanApi
 * @extends {BaseAPI}
 */
export class SfipPlanApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SfipPlanApi
     */
    public apiSfipIndicatorsGet(options?: any) {
        return SfipPlanApiFp(this.configuration).apiSfipIndicatorsGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} activityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SfipPlanApi
     */
    public getSfipActivitySchedule(activityId: number, options?: any) {
        return SfipPlanApiFp(this.configuration).getSfipActivitySchedule(activityId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SfipPlanApi
     */
    public getSfipIndicatorOffices(options?: any) {
        return SfipPlanApiFp(this.configuration).getSfipIndicatorOffices(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [officeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SfipPlanApi
     */
    public getSfipPlan(officeId?: number, options?: any) {
        return SfipPlanApiFp(this.configuration).getSfipPlan(officeId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get Plan Tree starting from Priority Set to Indicator.
     * @param {number} planId 
     * @param {number} officeId 
     * @param {boolean} [includeActivities] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SfipPlanApi
     */
    public getSfipPlanTree(planId: number, officeId: number, includeActivities?: boolean, options?: any) {
        return SfipPlanApiFp(this.configuration).getSfipPlanTree(planId, officeId, includeActivities, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} activityId 
     * @param {Array<SfipActivitySchedule>} [sfipActivitySchedule] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SfipPlanApi
     */
    public putSfipActivityScheduleList(activityId: number, sfipActivitySchedule?: Array<SfipActivitySchedule>, options?: any) {
        return SfipPlanApiFp(this.configuration).putSfipActivityScheduleList(activityId, sfipActivitySchedule, options)(this.axios, this.basePath);
    }

}


/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Test method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/Test`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestGetFromSPPost(id?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/Test/GetFromSP`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Test method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Test>> {
            const localVarAxiosArgs = TestApiAxiosParamCreator(configuration).apiTestGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestGetFromSPPost(id?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Test>> {
            const localVarAxiosArgs = TestApiAxiosParamCreator(configuration).apiTestGetFromSPPost(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Test method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestGet(options?: any) {
            return TestApiFp(configuration).apiTestGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestGetFromSPPost(id?: number, options?: any) {
            return TestApiFp(configuration).apiTestGetFromSPPost(id, options)(axios, basePath);
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @summary Test method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public apiTestGet(options?: any) {
        return TestApiFp(this.configuration).apiTestGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public apiTestGetFromSPPost(id?: number, options?: any) {
        return TestApiFp(this.configuration).apiTestGetFromSPPost(id, options)(this.axios, this.basePath);
    }

}


